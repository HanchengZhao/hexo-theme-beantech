{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/hz_logo.JPG","path":"img/hz_logo.JPG","modified":1,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":1,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"source/img/self.jpg","path":"img/self.jpg","modified":1,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/reservoir.jpg","path":"img/header_img/reservoir.jpg","modified":1,"renderable":0},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"source/img/header_img/home_bg_ud_night.jpg","path":"img/header_img/home_bg_ud_night.jpg","modified":1,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/header_img/ud_night2.jpg","path":"img/header_img/ud_night2.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"0faff01487675fca7c677bcdf200c51f4d2ff670","modified":1510093463426},{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1513121716025},{"_id":"source/CNAME","hash":"3680806b5507742f5f42a76f385b1a7ccb5c85c7","modified":1513650873000},{"_id":"themes/beantech/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1510089602334},{"_id":"themes/beantech/_config.yml","hash":"6afd65c055d9b1c70ae67323cc869f1b4aa60348","modified":1510089602335},{"_id":"source/_drafts/a.md","hash":"427dcbd387dbbe28677cac2337deef7a753efc9b","modified":1513121157761},{"_id":"source/about/index.md","hash":"59c945c47fa7f0f49c080e500b819b4172ad521b","modified":1513573743817},{"_id":"source/_posts/.DS_Store","hash":"30721c0d07128f67bc83539f5f08dd8628922f01","modified":1513649937837},{"_id":"source/_posts/Cloud-Based-Web-Tools-For-VIP.md","hash":"94c3deb85f361a455a228c45d4d43090fd5608ad","modified":1515856487093},{"_id":"source/_posts/Interesting-Software-Names.md","hash":"1621b5addcde73339b7d9b2e62f61e3593195ecb","modified":1522723561647},{"_id":"source/_posts/JavaScript-Flaws.md","hash":"bf9f052b4a036d2e470925c0cf89f4bff9dc73fa","modified":1513648869000},{"_id":"source/_posts/Python-Collections-And-Tricks.md","hash":"6823511e145646a7847b725647a7d21572125cc4","modified":1513649281542},{"_id":"source/_posts/To-My-Graduation.markdown","hash":"51c1ba1898385c81c6f35185b446c92e60b2d55c","modified":1513648220000},{"_id":"source/_posts/deploy-a-react-app-in-kubernetes.md","hash":"c695409d95d794e2642adaba150f5ca9eda321dc","modified":1515856469610},{"_id":"source/_posts/react-global-state-management.md","hash":"78854cb2a1d53100c226aaa1f61d534f720dac1e","modified":1520572172959},{"_id":"source/_posts/一次关于networking的对话.md","hash":"86b7b9a66268559fa0bde36bb8695d0944d3f9f6","modified":1514256433000},{"_id":"source/archive/index.md","hash":"945e5d0a779baa8239d734de30c57c0b3cc926ff","modified":1510198209883},{"_id":"source/tags/index.md","hash":"f0733166badf849ad60a32a210eff34015860839","modified":1510198496759},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1510089602335},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1510089602335},{"_id":"source/img/hz_logo.JPG","hash":"fa10c81b50c6d6360e0da9d2ca7834db992221e6","modified":1513573191167},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1510089602335},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1510089602336},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1510089602336},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1510089602337},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1510089602336},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1510089602336},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1510089602336},{"_id":"themes/beantech/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1510089602337},{"_id":"themes/beantech/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1510089602341},{"_id":"themes/beantech/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1510089602341},{"_id":"themes/beantech/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1510089602341},{"_id":"themes/beantech/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1510089602342},{"_id":"themes/beantech/layout/page.ejs","hash":"c90797e4394c5cb63c2515109480e766d04e486e","modified":1510089602342},{"_id":"themes/beantech/layout/post.ejs","hash":"2d55684fc539dc281f9e2ec0409f09ea6ca43949","modified":1510089602342},{"_id":"themes/beantech/layout/layout.ejs","hash":"8205bd04d838ec9829805c34c6998e25471be661","modified":1513572746015},{"_id":"themes/beantech/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1510089602343},{"_id":"source/_posts/Cloud-Based-Web-Tools-For-VIP/formlist.png","hash":"84d8e535105b97f5ae2419efd696090d184fef43","modified":1513649631991},{"_id":"source/_posts/一次关于networking的对话/lighthouse3.jpg","hash":"ceb795e0bd1278ea08a987560cb20fe4c76ae0c3","modified":1514256234058},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1510089602292},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"671e10ff2eb6fad451b155df7d72d125059c12ff","modified":1513573570000},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"aafb744601042f0270d2e6595129ac8a73ad2608","modified":1510089602338},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1510089602338},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"fde2d21475acade368a0325db7e23fd24a2eb8de","modified":1520571654771},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1510089602338},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1510089602339},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"837f01e8a20e5023b4b292d1b3141a399567da65","modified":1510089602339},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1510089602339},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1510089602340},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1510089602340},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1510089602340},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1510089602340},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"3b10bd768f6ef30a42b1703fbc9a88627f9bfdf1","modified":1510089602341},{"_id":"themes/beantech/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1510089602343},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1510089602344},{"_id":"themes/beantech/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1510089602344},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1510089602346},{"_id":"themes/beantech/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1510089602346},{"_id":"themes/beantech/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1510089602347},{"_id":"themes/beantech/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1510089602347},{"_id":"themes/beantech/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1510089602348},{"_id":"themes/beantech/source/css/toc.styl","hash":"6c9a2d5f6f981624e0c4b64323493e8614efea29","modified":1510089602348},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1510089602348},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1510089602350},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1510089602351},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1510089602350},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1510089602351},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1510089602352},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1510089602352},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1510089602354},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1510089602355},{"_id":"themes/beantech/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1510089602355},{"_id":"themes/beantech/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1510089602355},{"_id":"source/_posts/deploy-a-react-app-in-kubernetes/tree.jpg","hash":"1b05174884398fc960c31afb46be1b65ce07b56d","modified":1515856077437},{"_id":"source/img/self.jpg","hash":"80719b5a0facd80782a2b4b40a5f9252f4bf7a7d","modified":1513572276859},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1510089602346},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1510089602349},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1510089602351},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1510089602354},{"_id":"source/_posts/Cloud-Based-Web-Tools-For-VIP/cron_job.png","hash":"606e13cd06cbaae383f1616ce4426a30fae556a6","modified":1513649631938},{"_id":"source/img/header_img/about.jpg","hash":"82119e22e74e38efe67164aecdd7fa27af723539","modified":1510198271681},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1510089602299},{"_id":"source/img/header_img/reservoir.jpg","hash":"7f3809e40a441de3bd981142309ab4493b16ba95","modified":1510198438461},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1510089602347},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1510089602345},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1510089602347},{"_id":"source/img/header_img/home_bg_ud_night.jpg","hash":"dc6080e554fdce64335d200ccd5695af22962255","modified":1510094132138},{"_id":"themes/beantech/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1510089602353},{"_id":"source/_posts/Cloud-Based-Web-Tools-For-VIP/longwood.JPG","hash":"30217bf68187255925358b0ffa62d595d124a7b6","modified":1513649632023},{"_id":"source/_posts/Python-Collections-And-Tricks/us_map.JPG","hash":"c50e5bd601645aa85b19b446ce7d9b4afef3d8e9","modified":1513649112264},{"_id":"source/img/header_img/ud_night2.jpg","hash":"d16ed7cb22e2148059d67089115e261d29941226","modified":1510093860010},{"_id":"source/_posts/JavaScript-Flaws/centralPark.jpg","hash":"248b59bc027479570f45496ef4c6a351bd9ff675","modified":1513648459173},{"_id":"source/_posts/To-My-Graduation/campus.JPG","hash":"ca0deccc7b6030d32a3d310ed8e268766b0527b5","modified":1513647876648},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1510089602326},{"_id":"source/_posts/react-global-state-management/sunset.JPG","hash":"262924f7cb9e2cf17d9f6081cc3024b1fefb4d61","modified":1520571866489},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1510089602322},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1510089602316},{"_id":"source/_posts/To-My-Graduation/andy.jpg","hash":"2ab4ac4daf86d0102acbd51647bf5e866d9ce059","modified":1513647876631},{"_id":"source/_posts/To-My-Graduation/graduation.jpg","hash":"aaa88d0aa7be8ebc8e9b8c1494145a6f447e39e7","modified":1513647876687},{"_id":"source/_posts/To-My-Graduation/mac_room.JPG","hash":"d8fa6d41c1c73401f7cce66b551d1c1d17fce931","modified":1513647876740}],"Category":[{"name":"Projects","_id":"cjfj2ljt60006deu5vpkxvoqv"}],"Data":[],"Page":[{"layout":"404","description":"No resource here :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"No resource here :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-11-07T22:24:23.426Z","updated":"2017-11-07T22:24:23.426Z","path":"404.html","title":"","comments":1,"_id":"cjfj2ljrs0000deu5hvfjp2cc","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-11-09T03:48:33.000Z","description":"Finish each day and be done with it","header-img":"img/header_img/about.jpg","comments":1,"_content":"\n I’m a software engineer at [SevOne](https://www.sevone.com/).\n\n My interest lies from the front end to the back end, from the code to the design, from the beauty of arts to the logic of science, from the photography to all kinds of sports and everything in between.\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-11-8 22:48:33\ndescription: \"Finish each day and be done with it\"\nheader-img: \"img/header_img/about.jpg\"\ncomments: true\n---\n\n I’m a software engineer at [SevOne](https://www.sevone.com/).\n\n My interest lies from the front end to the back end, from the code to the design, from the beauty of arts to the logic of science, from the photography to all kinds of sports and everything in between.\n","updated":"2017-12-18T05:09:03.817Z","path":"about/index.html","_id":"cjfj2ljss0001deu599j2ipl0","content":"<p>I’m a software engineer at <a href=\"https://www.sevone.com/\" target=\"_blank\" rel=\"external\">SevOne</a>.</p>\n<p>My interest lies from the front end to the back end, from the code to the design, from the beauty of arts to the logic of science, from the photography to all kinds of sports and everything in between.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’m a software engineer at <a href=\"https://www.sevone.com/\" target=\"_blank\" rel=\"external\">SevOne</a>.</p>\n<p>My interest lies from the front end to the back end, from the code to the design, from the beauty of arts to the logic of science, from the photography to all kinds of sports and everything in between.</p>\n"},{"layout":"archive","title":"Archives","header-img":"img/header_img/ud_night2.jpg","comments":0,"date":"2017-03-21T00:49:56.000Z","description":" ","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/ud_night2.jpg\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \" \"\n---\n","updated":"2017-11-09T03:30:09.883Z","path":"archive/index.html","_id":"cjfj2ljt00003deu54o1brt5w","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":" ","header-img":"img/header_img/reservoir.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \" \"\nheader-img: \"img/header_img/reservoir.jpg\"\n---\n","date":"2017-11-09T03:34:56.759Z","updated":"2017-11-09T03:34:56.759Z","path":"tags/index.html","comments":1,"_id":"cjfj2ljuv0014deu5cj3uw43m","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"a","catalog":true,"subtitle":null,"header-img":null,"_content":"### test draft post\n\n{% codeblock lang:javascript %}\nvar a = function(a, b) {\n    console.log(\"hi\")；\n}\n{% endcodeblock %}","source":"_drafts/a.md","raw":"---\ntitle: a\ncatalog: true\nsubtitle:\nheader-img:\ntags:\n---\n### test draft post\n\n{% codeblock lang:javascript %}\nvar a = function(a, b) {\n    console.log(\"hi\")；\n}\n{% endcodeblock %}","slug":"a","published":0,"date":"2017-12-08T21:48:15.228Z","updated":"2017-12-12T23:25:57.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfj2ljsu0002deu5e1gjq97k","content":"<h3 id=\"test-draft-post\">test draft post</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hi\"</span>)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"test-draft-post\">test draft post</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hi\"</span>)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Cloud Based Web Tools For VIP","catalog":true,"date":"2017-11-19T02:10:56.000Z","subtitle":null,"header-img":"longwood.JPG","_content":"\n\n> Reactjs, Firebase, Cloud Functions, serverless architecture, material ui\n\n\nThe project that I have been working on recently is a cloud-based web tool for ASU to manage new teams, announcements, student/project application and peer evaluation. [Github link](https://github.com/HanchengZhao/VIP-web)\n\nSo it is basically a CMS(content management system), but far more lightweight than Drupal, Sharepoint or WordPress. It is still an SPA (single page application), yet a huge upgrade of my last year's peer evaluation tool for UD.\n\nIt has been a fun journey so far and I have tried many brand new things and received new experience, so it is worth recording some thoughts along the way.\n\n## Why cloud-based serverless architecture?\n\nThis is a fundamental question why we choose firebase as our backend or even infrastructure. \nFirst of all, serveless does not mean **\"no server at all\"**, it only means that end users or developers no longer need to build or maintain their own servers. Rather, they borrow microservices that are wrapped from those giant tech companies servers, like Amazon Web Service(AWS) or Google Cloud Platform. Thus, developers can focus only on the app logic or ui side, which saves so much money and time especially for startups. Those platform usually provide all kinds of services from database storage to monitoring/testing, web hosting, email/message notification and cloud functions. This 'all in one' solution is so much more handy for developers. \n\nBesides, the selling point of serverless is that **\"you only pay the compute that you need\"**. There is no waiting time for servers to start, they are just constantly running and you only account for the computing power that you need. Nowadays, people share cars, houses, now even the computing power. \nOf course serverless architecture is not a panacea, but it meets our needs so far.\n\n## Then why Firebase?\n\nSimply because it provides the exact service that we need for our app. We need a Nosql database, a secure authentication system to implement role-based access control, a storage service to save posters or team logos, an easy-to-deploy hosting service, and backend cloud functions to handle light logic, sanitize data or send emails for us. Besides, it has nice ui and easy-to-use command line tool. After being acquired by Google last summer, it has stronger back and is well integrated into google cloud platform.\n\n## Implementations\n\n### Schedule (Cron) tasks with Cloud Functions\n\nCloud functions are so powerful that they can serve as a fast-loading server to deal with database and storage. However, they are usually triggered by events, such as `onWrite` action.\n\nFirebase blog has a article explaining using App Engine from google cloud platform to do it:\n> [How to Schedule (Cron) Jobs with Cloud Functions for Firebase](https://firebase.googleblog.com/2017/03/how-to-schedule-cron-jobs-with-cloud.html)\n\nHere, we choose the site [Cron Job](https://cron-job.org/en/) to handle cron work for us. It has user-friendly interface and is easy to configure cron jobs. \n\n![cron job](cron_job.png)\n\nHere we set the cron job to run once a day to remove overdue announcement and put scheduled ones in the page. It is important to add a key parameter after the url to avoid malicious access.\n\n### Render elements iteratively in React\n\nIn React, components can be saved and passed as variables. It gives us a more flexible way to loop elements in an array, and interatively render components in the same format. Here is an example of 'formItem' component:\n\n```js\n\nlet formItem = keys.map((key) => (\n    <tr key = {key}>\n        <td><Link to={`${team}/${key}`}>{forms[key].formName}</Link></td>\n        <td>{forms[key].startDate.substr(0,15)}</td>\n        <td>{forms[key].endDate.substr(0,15)}</td>\n        <td>{forms[key].editDate.substr(0,15)}</td>\n        <td>{key === defaultId ? 'default' : <a href=\"#\" onClick = {(e) => this.setAsDefault(team, key,e) }>set as default</a>}</td>\n        <td><i className =\"glyphicon glyphicon-remove\" style = {{cursor:\"pointer\"}} id = {key} onClick = {() => this.handleRemove(team, key)}/></td>\n    </tr>\n    ));\n\n```\nIn es6, `()` after `=>` will be returned directly.\nThen it wraps the component inside a table:\n```\n<tbody>\n {formItem}\n</tbody>\n```\nafter this, return the whole component inside a function called `teamTablegenerate`, then generating a table for each team is possible inside render function:\n```js\n\nObject.keys(this.state.questions).map((team) => {\n    return this.teamTablegenerate(team)\n})\n\n```\n\n![FormList](formlist.png)\n\n\n<!-- ### deploy\n### pagination\n### auth\n- only redirect in the first login  \n    - sessionstorage \n- \n\n## react-router\n### conditional rendering\n- how to go back to last path with last state\n\n## mobx\n\n## announcement\n### debounce -->\n","source":"_posts/Cloud-Based-Web-Tools-For-VIP.md","raw":"---\ntitle: Cloud Based Web Tools For VIP\ncatalog: true\ndate: 2017-11-18 21:10:56\nsubtitle:\nheader-img: \"longwood.JPG\"\ntags:\n- Cloud\n- Reactjs\n- Firebase\ncategories:\n- Projects\n---\n\n\n> Reactjs, Firebase, Cloud Functions, serverless architecture, material ui\n\n\nThe project that I have been working on recently is a cloud-based web tool for ASU to manage new teams, announcements, student/project application and peer evaluation. [Github link](https://github.com/HanchengZhao/VIP-web)\n\nSo it is basically a CMS(content management system), but far more lightweight than Drupal, Sharepoint or WordPress. It is still an SPA (single page application), yet a huge upgrade of my last year's peer evaluation tool for UD.\n\nIt has been a fun journey so far and I have tried many brand new things and received new experience, so it is worth recording some thoughts along the way.\n\n## Why cloud-based serverless architecture?\n\nThis is a fundamental question why we choose firebase as our backend or even infrastructure. \nFirst of all, serveless does not mean **\"no server at all\"**, it only means that end users or developers no longer need to build or maintain their own servers. Rather, they borrow microservices that are wrapped from those giant tech companies servers, like Amazon Web Service(AWS) or Google Cloud Platform. Thus, developers can focus only on the app logic or ui side, which saves so much money and time especially for startups. Those platform usually provide all kinds of services from database storage to monitoring/testing, web hosting, email/message notification and cloud functions. This 'all in one' solution is so much more handy for developers. \n\nBesides, the selling point of serverless is that **\"you only pay the compute that you need\"**. There is no waiting time for servers to start, they are just constantly running and you only account for the computing power that you need. Nowadays, people share cars, houses, now even the computing power. \nOf course serverless architecture is not a panacea, but it meets our needs so far.\n\n## Then why Firebase?\n\nSimply because it provides the exact service that we need for our app. We need a Nosql database, a secure authentication system to implement role-based access control, a storage service to save posters or team logos, an easy-to-deploy hosting service, and backend cloud functions to handle light logic, sanitize data or send emails for us. Besides, it has nice ui and easy-to-use command line tool. After being acquired by Google last summer, it has stronger back and is well integrated into google cloud platform.\n\n## Implementations\n\n### Schedule (Cron) tasks with Cloud Functions\n\nCloud functions are so powerful that they can serve as a fast-loading server to deal with database and storage. However, they are usually triggered by events, such as `onWrite` action.\n\nFirebase blog has a article explaining using App Engine from google cloud platform to do it:\n> [How to Schedule (Cron) Jobs with Cloud Functions for Firebase](https://firebase.googleblog.com/2017/03/how-to-schedule-cron-jobs-with-cloud.html)\n\nHere, we choose the site [Cron Job](https://cron-job.org/en/) to handle cron work for us. It has user-friendly interface and is easy to configure cron jobs. \n\n![cron job](cron_job.png)\n\nHere we set the cron job to run once a day to remove overdue announcement and put scheduled ones in the page. It is important to add a key parameter after the url to avoid malicious access.\n\n### Render elements iteratively in React\n\nIn React, components can be saved and passed as variables. It gives us a more flexible way to loop elements in an array, and interatively render components in the same format. Here is an example of 'formItem' component:\n\n```js\n\nlet formItem = keys.map((key) => (\n    <tr key = {key}>\n        <td><Link to={`${team}/${key}`}>{forms[key].formName}</Link></td>\n        <td>{forms[key].startDate.substr(0,15)}</td>\n        <td>{forms[key].endDate.substr(0,15)}</td>\n        <td>{forms[key].editDate.substr(0,15)}</td>\n        <td>{key === defaultId ? 'default' : <a href=\"#\" onClick = {(e) => this.setAsDefault(team, key,e) }>set as default</a>}</td>\n        <td><i className =\"glyphicon glyphicon-remove\" style = {{cursor:\"pointer\"}} id = {key} onClick = {() => this.handleRemove(team, key)}/></td>\n    </tr>\n    ));\n\n```\nIn es6, `()` after `=>` will be returned directly.\nThen it wraps the component inside a table:\n```\n<tbody>\n {formItem}\n</tbody>\n```\nafter this, return the whole component inside a function called `teamTablegenerate`, then generating a table for each team is possible inside render function:\n```js\n\nObject.keys(this.state.questions).map((team) => {\n    return this.teamTablegenerate(team)\n})\n\n```\n\n![FormList](formlist.png)\n\n\n<!-- ### deploy\n### pagination\n### auth\n- only redirect in the first login  \n    - sessionstorage \n- \n\n## react-router\n### conditional rendering\n- how to go back to last path with last state\n\n## mobx\n\n## announcement\n### debounce -->\n","slug":"Cloud-Based-Web-Tools-For-VIP","published":1,"updated":"2018-01-13T15:14:47.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfj2ljt10004deu5hdvsjbi7","content":"<blockquote>\n<p>Reactjs, Firebase, Cloud Functions, serverless architecture, material ui</p>\n</blockquote>\n<p>The project that I have been working on recently is a cloud-based web tool for ASU to manage new teams, announcements, student/project application and peer evaluation. <a href=\"https://github.com/HanchengZhao/VIP-web\" target=\"_blank\" rel=\"external\">Github link</a></p>\n<p>So it is basically a CMS(content management system), but far more lightweight than Drupal, Sharepoint or WordPress. It is still an SPA (single page application), yet a huge upgrade of my last year’s peer evaluation tool for UD.</p>\n<p>It has been a fun journey so far and I have tried many brand new things and received new experience, so it is worth recording some thoughts along the way.</p>\n<h2 id=\"why-cloud-based-serverless-architecture\">Why cloud-based serverless architecture?</h2>\n<p>This is a fundamental question why we choose firebase as our backend or even infrastructure.<br>\nFirst of all, serveless does not mean <strong>“no server at all”</strong>, it only means that end users or developers no longer need to build or maintain their own servers. Rather, they borrow microservices that are wrapped from those giant tech companies servers, like Amazon Web Service(AWS) or Google Cloud Platform. Thus, developers can focus only on the app logic or ui side, which saves so much money and time especially for startups. Those platform usually provide all kinds of services from database storage to monitoring/testing, web hosting, email/message notification and cloud functions. This ‘all in one’ solution is so much more handy for developers.</p>\n<p>Besides, the selling point of serverless is that <strong>“you only pay the compute that you need”</strong>. There is no waiting time for servers to start, they are just constantly running and you only account for the computing power that you need. Nowadays, people share cars, houses, now even the computing power.<br>\nOf course serverless architecture is not a panacea, but it meets our needs so far.</p>\n<h2 id=\"then-why-firebase\">Then why Firebase?</h2>\n<p>Simply because it provides the exact service that we need for our app. We need a Nosql database, a secure authentication system to implement role-based access control, a storage service to save posters or team logos, an easy-to-deploy hosting service, and backend cloud functions to handle light logic, sanitize data or send emails for us. Besides, it has nice ui and easy-to-use command line tool. After being acquired by Google last summer, it has stronger back and is well integrated into google cloud platform.</p>\n<h2 id=\"implementations\">Implementations</h2>\n<h3 id=\"schedule-cron-tasks-with-cloud-functions\">Schedule (Cron) tasks with Cloud Functions</h3>\n<p>Cloud functions are so powerful that they can serve as a fast-loading server to deal with database and storage. However, they are usually triggered by events, such as <code>onWrite</code> action.</p>\n<p>Firebase blog has a article explaining using App Engine from google cloud platform to do it:</p>\n<blockquote>\n<p><a href=\"https://firebase.googleblog.com/2017/03/how-to-schedule-cron-jobs-with-cloud.html\" target=\"_blank\" rel=\"external\">How to Schedule (Cron) Jobs with Cloud Functions for Firebase</a></p>\n</blockquote>\n<p>Here, we choose the site <a href=\"https://cron-job.org/en/\" target=\"_blank\" rel=\"external\">Cron Job</a> to handle cron work for us. It has user-friendly interface and is easy to configure cron jobs.</p>\n<p><img src=\"cron_job.png\" alt=\"cron job\"></p>\n<p>Here we set the cron job to run once a day to remove overdue announcement and put scheduled ones in the page. It is important to add a key parameter after the url to avoid malicious access.</p>\n<h3 id=\"render-elements-iteratively-in-react\">Render elements iteratively in React</h3>\n<p>In React, components can be saved and passed as variables. It gives us a more flexible way to loop elements in an array, and interatively render components in the same format. Here is an example of ‘formItem’ component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> formItem = keys.map(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> (</span><br><span class=\"line\">    &lt;tr key = &#123;key&#125;&gt;</span><br><span class=\"line\">        &lt;td&gt;&lt;Link to=&#123;`$&#123;team&#125;/$&#123;key&#125;`&#125;&gt;&#123;forms[key].formName&#125;&lt;/Link&gt;&lt;/td&gt;</span><br><span class=\"line\">        &lt;td&gt;&#123;forms[key].startDate.substr(<span class=\"number\">0</span>,<span class=\"number\">15</span>)&#125;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;&#123;forms[key].endDate.substr(0,15)&#125;&lt;/</span>td&gt;</span><br><span class=\"line\">        &lt;td&gt;&#123;forms[key].editDate.substr(<span class=\"number\">0</span>,<span class=\"number\">15</span>)&#125;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;&#123;key === defaultId ? 'default' : &lt;a href=\"#\" onClick = &#123;(e) =&gt; this.setAsDefault(team, key,e) &#125;&gt;set as default&lt;/</span>a&gt;&#125;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;&lt;i className =\"glyphicon glyphicon-remove\" style = &#123;&#123;cursor:\"pointer\"&#125;&#125; id = &#123;key&#125; onClick = &#123;() =&gt; this.handleRemove(team, key)&#125;/</span>&gt;&lt;/td&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/tr&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ));</span></span><br></pre></td></tr></table></figure>\n<p>In es6, <code>()</code> after <code>=&gt;</code> will be returned directly.<br>\nThen it wraps the component inside a table:</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> </span><span class=\"template-variable\">&#123;formItem&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>after this, return the whole component inside a function called <code>teamTablegenerate</code>, then generating a table for each team is possible inside render function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.state.questions).map(<span class=\"function\">(<span class=\"params\">team</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.teamTablegenerate(team)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"formlist.png\" alt=\"FormList\"></p>\n<!-- ### deploy\n### pagination\n### auth\n- only redirect in the first login  \n    - sessionstorage \n- \n\n## react-router\n### conditional rendering\n- how to go back to last path with last state\n\n## mobx\n\n## announcement\n### debounce -->\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Reactjs, Firebase, Cloud Functions, serverless architecture, material ui</p>\n</blockquote>\n<p>The project that I have been working on recently is a cloud-based web tool for ASU to manage new teams, announcements, student/project application and peer evaluation. <a href=\"https://github.com/HanchengZhao/VIP-web\" target=\"_blank\" rel=\"external\">Github link</a></p>\n<p>So it is basically a CMS(content management system), but far more lightweight than Drupal, Sharepoint or WordPress. It is still an SPA (single page application), yet a huge upgrade of my last year’s peer evaluation tool for UD.</p>\n<p>It has been a fun journey so far and I have tried many brand new things and received new experience, so it is worth recording some thoughts along the way.</p>\n<h2 id=\"why-cloud-based-serverless-architecture\">Why cloud-based serverless architecture?</h2>\n<p>This is a fundamental question why we choose firebase as our backend or even infrastructure.<br>\nFirst of all, serveless does not mean <strong>“no server at all”</strong>, it only means that end users or developers no longer need to build or maintain their own servers. Rather, they borrow microservices that are wrapped from those giant tech companies servers, like Amazon Web Service(AWS) or Google Cloud Platform. Thus, developers can focus only on the app logic or ui side, which saves so much money and time especially for startups. Those platform usually provide all kinds of services from database storage to monitoring/testing, web hosting, email/message notification and cloud functions. This ‘all in one’ solution is so much more handy for developers.</p>\n<p>Besides, the selling point of serverless is that <strong>“you only pay the compute that you need”</strong>. There is no waiting time for servers to start, they are just constantly running and you only account for the computing power that you need. Nowadays, people share cars, houses, now even the computing power.<br>\nOf course serverless architecture is not a panacea, but it meets our needs so far.</p>\n<h2 id=\"then-why-firebase\">Then why Firebase?</h2>\n<p>Simply because it provides the exact service that we need for our app. We need a Nosql database, a secure authentication system to implement role-based access control, a storage service to save posters or team logos, an easy-to-deploy hosting service, and backend cloud functions to handle light logic, sanitize data or send emails for us. Besides, it has nice ui and easy-to-use command line tool. After being acquired by Google last summer, it has stronger back and is well integrated into google cloud platform.</p>\n<h2 id=\"implementations\">Implementations</h2>\n<h3 id=\"schedule-cron-tasks-with-cloud-functions\">Schedule (Cron) tasks with Cloud Functions</h3>\n<p>Cloud functions are so powerful that they can serve as a fast-loading server to deal with database and storage. However, they are usually triggered by events, such as <code>onWrite</code> action.</p>\n<p>Firebase blog has a article explaining using App Engine from google cloud platform to do it:</p>\n<blockquote>\n<p><a href=\"https://firebase.googleblog.com/2017/03/how-to-schedule-cron-jobs-with-cloud.html\" target=\"_blank\" rel=\"external\">How to Schedule (Cron) Jobs with Cloud Functions for Firebase</a></p>\n</blockquote>\n<p>Here, we choose the site <a href=\"https://cron-job.org/en/\" target=\"_blank\" rel=\"external\">Cron Job</a> to handle cron work for us. It has user-friendly interface and is easy to configure cron jobs.</p>\n<p><img src=\"cron_job.png\" alt=\"cron job\"></p>\n<p>Here we set the cron job to run once a day to remove overdue announcement and put scheduled ones in the page. It is important to add a key parameter after the url to avoid malicious access.</p>\n<h3 id=\"render-elements-iteratively-in-react\">Render elements iteratively in React</h3>\n<p>In React, components can be saved and passed as variables. It gives us a more flexible way to loop elements in an array, and interatively render components in the same format. Here is an example of ‘formItem’ component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> formItem = keys.map(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> (</span><br><span class=\"line\">    &lt;tr key = &#123;key&#125;&gt;</span><br><span class=\"line\">        &lt;td&gt;&lt;Link to=&#123;`$&#123;team&#125;/$&#123;key&#125;`&#125;&gt;&#123;forms[key].formName&#125;&lt;/Link&gt;&lt;/td&gt;</span><br><span class=\"line\">        &lt;td&gt;&#123;forms[key].startDate.substr(<span class=\"number\">0</span>,<span class=\"number\">15</span>)&#125;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;&#123;forms[key].endDate.substr(0,15)&#125;&lt;/</span>td&gt;</span><br><span class=\"line\">        &lt;td&gt;&#123;forms[key].editDate.substr(<span class=\"number\">0</span>,<span class=\"number\">15</span>)&#125;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;&#123;key === defaultId ? 'default' : &lt;a href=\"#\" onClick = &#123;(e) =&gt; this.setAsDefault(team, key,e) &#125;&gt;set as default&lt;/</span>a&gt;&#125;&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;&lt;i className =\"glyphicon glyphicon-remove\" style = &#123;&#123;cursor:\"pointer\"&#125;&#125; id = &#123;key&#125; onClick = &#123;() =&gt; this.handleRemove(team, key)&#125;/</span>&gt;&lt;/td&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/tr&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ));</span></span><br></pre></td></tr></table></figure>\n<p>In es6, <code>()</code> after <code>=&gt;</code> will be returned directly.<br>\nThen it wraps the component inside a table:</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> </span><span class=\"template-variable\">&#123;formItem&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>after this, return the whole component inside a function called <code>teamTablegenerate</code>, then generating a table for each team is possible inside render function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.state.questions).map(<span class=\"function\">(<span class=\"params\">team</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.teamTablegenerate(team)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"formlist.png\" alt=\"FormList\"></p>\n<!-- ### deploy\n### pagination\n### auth\n- only redirect in the first login  \n    - sessionstorage \n- \n\n## react-router\n### conditional rendering\n- how to go back to last path with last state\n\n## mobx\n\n## announcement\n### debounce -->\n"},{"title":"一些有趣的软件名","catalog":true,"date":"2018-04-03T02:46:01.000Z","subtitle":"无厘头，不代码","header-img":"trip.JPG","_content":"\n缘起一个关于CockroachDB的吐槽：\n<img src=\"./trigger.png\" style=\"max-width: 50%\" alt=\"trigger\" />\n\n然后觉得这名字起得实在太好。细想了一下，程序猿确实是一个极其有才华（闷骚）的群体，在软件领域，很多取名极富内涵且有趣。\n\n### [CockroachDB](https://www.cockroachlabs.com/)\n一个专为云服务和分布式设计的数据库, 可以存储nosql的数据，又支持SQL语言，很受关注。但是同事抱怨每次看到这个名字，心里还是发毛。细想了一下，以cockroach(小强)作为一个分布式数据库，简直是形象地表露了好几个重要特征：\n* 分布式，无处不在\n* 高可用性，极其难杀死\n* 非常灵活\n\n\n### [Java & Kotlin](https://mp.weixin.qq.com/s/K6NTWV9gth8Ge-eDvTzWfQ)\n\n众所周知，Java是以Java岛来命名的。JetBrains团队在开发了十几年IntelliJ IDEA之后，爱恨交加，决定开发一门自己的语言，然后为了效仿Java一样用岛来命名，于是找到了位于圣彼得堡以西 30 公里处芬兰湾的一个科特林岛，英文就是 Kotlin，一门新的编程语言诞生了。\n\n### [Google](https://graphics.stanford.edu/~dk/google_name_origin.html), [Hadoop](https://www.quora.com/Whats-the-origin-of-the-name-Hadoop)\n\n这两个都是生造出来的，原本并不存在。根据斯坦福教授\tDavid Koller[回忆](https://graphics.stanford.edu/~dk/google_name_origin.html)，谷歌一开始的搜索引擎叫\"BackRub\", 因其能分析web的\"back links\"。后来拉里佩奇一伙人在白板上尝试想出一个与大量数据索引有关的词。有人提出了\"googolplex\"，拉里佩奇觉得缩写\"googol\"（词意大概是10^100)更好，然后他同事Sean Anderson就去搜新的域名是否被注册了。但是，他在搜索的时候拼成了“google.com”，发现可以用，后来拉里佩奇觉得这名字也不错，于是注册了这个域名。\n\n这也是为什么一直以来都有人质疑google的名字是打错了。\n\n而Hadoop更无厘头，根据作者Doug Cutting所说，这名字就是他儿子给一个毛绒象取得，但是觉得简短，好记，从没在别的地方用过，于是就拿来用了。\n\n### kubernetes & helm\n\nKubernetes是这两年大火的自动化部署、管理容器应用的系统，一般简称k8s。这个名字由来应该和Docker本身很有关系。Docker的logo是一条鲸鱼顶着一堆集装箱的图案,容器在这里被看成一个个的集装箱，相互独立隔绝。\n\n<img src=\"https://tr4.cbsistatic.com/hub/i/r/2016/10/18/831f017c-ee68-4bd6-8a5c-ab31b4d35d6d/resize/770x/1cedcf2f03388a9720835a628a8a9765/dockerhero.jpg\" style=\"max-width: 50%\" alt=\"docker\" />\n\nKubernetes在希腊语里面是舵手的意思，英文helmsman，象征掌管、运输着一个个集装箱，这也就是为什么我们会有`kubectl`（kubernetes control) 和 `helm`，而logo就是一个船的舵把。\n\n<img src=\"https://kubernetes.io/images/favicon.png\" style=\"max-width: 50%\" alt=\"kubernetes\" />\n\n\n\n### GNU’s Not Unix\n\n作为开源世界大名鼎鼎的操作系统以及项目，GNU的命名也是很极客范，全称是GNU的递归形式——GNU's Not Unix, 无限自我调用展开。\n\n### [Ruby](https://www.ruby-lang.org/en/) & gem:\n\nRuby就是红宝石的意思，而作为它的包管理器和命令行工具，叫gem(宝石)也不奇怪啦。\n\n### [Vue](https://vuejs.org/v2/guide/) & [React](https://reactjs.org/):\n\n这两个前端框架（也许应该叫库）的取名直接就体现了他们自己代表的特点：\n* Vue 是 View 的法语，诞生之初就是基于MVVM的思想设计，但是强调核心库专注于view这一层，因此库如其名。\n\n* React 也强调自己仅仅是View层，但是因为其强烈受函数式编程的思想，所以突出自己响应式，声明式，自然名字也是很符合了。\n\n一直不知道Angular(有角的)取这名是为什么，难道想说明自己更迭并不平滑:)，相信从Angular.js到Angular的经历大家都能体会。\n\n\n### [camel case](https://note.youdao.com/)\n\n驼峰命名法，其实这个名字也很形象了。因为变量命名一直是老大难，为了形象说明这个变量啥意思，经常要用好几个单词，所以一般把除掉第一个单词的首字母大写，比如 thisVariableSucks, 中间两个字母耸起，宛如驼峰，因此得名。\n\n### [Android](https://www.android.com/)\n安卓就是机器人的意思，但比较有意思的是它每一个版本代号的起名，基本都是谷歌公司一种糖果的名字：\n\n\nName | Version\n---|---\nCupcake(纸杯蛋糕) | 1.5\nDonut(甜甜圈) |\t 1.6\nEclair(长形松饼)\t| 2.0–2.1\nFroyo(冻酸奶) |\t 2.2–2.2.3\nGingerbread(姜饼)\t| 2.3–2.3.7\nHoneycomb（蜂窝） |\t 3.0–3.2.6\nIce Cream Sandwich （冰淇淋三明治） |\t4.0–4.0.4\nJelly Bean （果冻豆）|\t4.1–4.3.1\nKitKat（奇巧巧克力） |\t4.4–4.4.4, 4.4W–4.4W.2\nLollipop（棒棒糖） |\t5.0–5.1.1\nMarshmallow（棉花糖） |\t6.0–6.0.1\nNougat（牛轧糖） |\t7\nOreo（奥利奥） |\t 8\nP （据说是Pistachio Ice Cream？）|\t 9\n\n\n\n当然，还有很多取名也非常有意思，比如\n* [Yahoo!](https://www.yahoo.com/)\n* [Python](https://www.python.org/)\n* [Postman](https://www.getpostman.com/)\n* [Prometheus](https://prometheus.io/)\n* [codepen](https://codepen.io/)\n\n因为懒，不一一赘述。","source":"_posts/Interesting-Software-Names.md","raw":"---\ntitle: 一些有趣的软件名\ncatalog: true\ndate: 2018-04-02 22:46:01\nsubtitle: 无厘头，不代码\nheader-img: 'trip.JPG'\ntags:\n- CockroachDB\n- Google\n- Kubernetes\n- Docker\n- React.js\n---\n\n缘起一个关于CockroachDB的吐槽：\n<img src=\"./trigger.png\" style=\"max-width: 50%\" alt=\"trigger\" />\n\n然后觉得这名字起得实在太好。细想了一下，程序猿确实是一个极其有才华（闷骚）的群体，在软件领域，很多取名极富内涵且有趣。\n\n### [CockroachDB](https://www.cockroachlabs.com/)\n一个专为云服务和分布式设计的数据库, 可以存储nosql的数据，又支持SQL语言，很受关注。但是同事抱怨每次看到这个名字，心里还是发毛。细想了一下，以cockroach(小强)作为一个分布式数据库，简直是形象地表露了好几个重要特征：\n* 分布式，无处不在\n* 高可用性，极其难杀死\n* 非常灵活\n\n\n### [Java & Kotlin](https://mp.weixin.qq.com/s/K6NTWV9gth8Ge-eDvTzWfQ)\n\n众所周知，Java是以Java岛来命名的。JetBrains团队在开发了十几年IntelliJ IDEA之后，爱恨交加，决定开发一门自己的语言，然后为了效仿Java一样用岛来命名，于是找到了位于圣彼得堡以西 30 公里处芬兰湾的一个科特林岛，英文就是 Kotlin，一门新的编程语言诞生了。\n\n### [Google](https://graphics.stanford.edu/~dk/google_name_origin.html), [Hadoop](https://www.quora.com/Whats-the-origin-of-the-name-Hadoop)\n\n这两个都是生造出来的，原本并不存在。根据斯坦福教授\tDavid Koller[回忆](https://graphics.stanford.edu/~dk/google_name_origin.html)，谷歌一开始的搜索引擎叫\"BackRub\", 因其能分析web的\"back links\"。后来拉里佩奇一伙人在白板上尝试想出一个与大量数据索引有关的词。有人提出了\"googolplex\"，拉里佩奇觉得缩写\"googol\"（词意大概是10^100)更好，然后他同事Sean Anderson就去搜新的域名是否被注册了。但是，他在搜索的时候拼成了“google.com”，发现可以用，后来拉里佩奇觉得这名字也不错，于是注册了这个域名。\n\n这也是为什么一直以来都有人质疑google的名字是打错了。\n\n而Hadoop更无厘头，根据作者Doug Cutting所说，这名字就是他儿子给一个毛绒象取得，但是觉得简短，好记，从没在别的地方用过，于是就拿来用了。\n\n### kubernetes & helm\n\nKubernetes是这两年大火的自动化部署、管理容器应用的系统，一般简称k8s。这个名字由来应该和Docker本身很有关系。Docker的logo是一条鲸鱼顶着一堆集装箱的图案,容器在这里被看成一个个的集装箱，相互独立隔绝。\n\n<img src=\"https://tr4.cbsistatic.com/hub/i/r/2016/10/18/831f017c-ee68-4bd6-8a5c-ab31b4d35d6d/resize/770x/1cedcf2f03388a9720835a628a8a9765/dockerhero.jpg\" style=\"max-width: 50%\" alt=\"docker\" />\n\nKubernetes在希腊语里面是舵手的意思，英文helmsman，象征掌管、运输着一个个集装箱，这也就是为什么我们会有`kubectl`（kubernetes control) 和 `helm`，而logo就是一个船的舵把。\n\n<img src=\"https://kubernetes.io/images/favicon.png\" style=\"max-width: 50%\" alt=\"kubernetes\" />\n\n\n\n### GNU’s Not Unix\n\n作为开源世界大名鼎鼎的操作系统以及项目，GNU的命名也是很极客范，全称是GNU的递归形式——GNU's Not Unix, 无限自我调用展开。\n\n### [Ruby](https://www.ruby-lang.org/en/) & gem:\n\nRuby就是红宝石的意思，而作为它的包管理器和命令行工具，叫gem(宝石)也不奇怪啦。\n\n### [Vue](https://vuejs.org/v2/guide/) & [React](https://reactjs.org/):\n\n这两个前端框架（也许应该叫库）的取名直接就体现了他们自己代表的特点：\n* Vue 是 View 的法语，诞生之初就是基于MVVM的思想设计，但是强调核心库专注于view这一层，因此库如其名。\n\n* React 也强调自己仅仅是View层，但是因为其强烈受函数式编程的思想，所以突出自己响应式，声明式，自然名字也是很符合了。\n\n一直不知道Angular(有角的)取这名是为什么，难道想说明自己更迭并不平滑:)，相信从Angular.js到Angular的经历大家都能体会。\n\n\n### [camel case](https://note.youdao.com/)\n\n驼峰命名法，其实这个名字也很形象了。因为变量命名一直是老大难，为了形象说明这个变量啥意思，经常要用好几个单词，所以一般把除掉第一个单词的首字母大写，比如 thisVariableSucks, 中间两个字母耸起，宛如驼峰，因此得名。\n\n### [Android](https://www.android.com/)\n安卓就是机器人的意思，但比较有意思的是它每一个版本代号的起名，基本都是谷歌公司一种糖果的名字：\n\n\nName | Version\n---|---\nCupcake(纸杯蛋糕) | 1.5\nDonut(甜甜圈) |\t 1.6\nEclair(长形松饼)\t| 2.0–2.1\nFroyo(冻酸奶) |\t 2.2–2.2.3\nGingerbread(姜饼)\t| 2.3–2.3.7\nHoneycomb（蜂窝） |\t 3.0–3.2.6\nIce Cream Sandwich （冰淇淋三明治） |\t4.0–4.0.4\nJelly Bean （果冻豆）|\t4.1–4.3.1\nKitKat（奇巧巧克力） |\t4.4–4.4.4, 4.4W–4.4W.2\nLollipop（棒棒糖） |\t5.0–5.1.1\nMarshmallow（棉花糖） |\t6.0–6.0.1\nNougat（牛轧糖） |\t7\nOreo（奥利奥） |\t 8\nP （据说是Pistachio Ice Cream？）|\t 9\n\n\n\n当然，还有很多取名也非常有意思，比如\n* [Yahoo!](https://www.yahoo.com/)\n* [Python](https://www.python.org/)\n* [Postman](https://www.getpostman.com/)\n* [Prometheus](https://prometheus.io/)\n* [codepen](https://codepen.io/)\n\n因为懒，不一一赘述。","slug":"Interesting-Software-Names","published":1,"updated":"2018-04-03T03:30:42.000Z","_id":"cjfj2ljt40005deu514yvjwpd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>缘起一个关于CockroachDB的吐槽：<br>\n<img src=\"./trigger.png\" style=\"max-width: 50%\" alt=\"trigger\"></p>\n<p>然后觉得这名字起得实在太好。细想了一下，程序猿确实是一个极其有才华（闷骚）的群体，在软件领域，很多取名极富内涵且有趣。</p>\n<h3 id=\"cockroachdb\"><a href=\"https://www.cockroachlabs.com/\" target=\"_blank\" rel=\"external\">CockroachDB</a></h3>\n<p>一个专为云服务和分布式设计的数据库, 可以存储nosql的数据，又支持SQL语言，很受关注。但是同事抱怨每次看到这个名字，心里还是发毛。细想了一下，以cockroach(小强)作为一个分布式数据库，简直是形象地表露了好几个重要特征：</p>\n<ul>\n<li>分布式，无处不在</li>\n<li>高可用性，极其难杀死</li>\n<li>非常灵活</li>\n</ul>\n<h3 id=\"java-amp-kotlin\"><a href=\"https://mp.weixin.qq.com/s/K6NTWV9gth8Ge-eDvTzWfQ\" target=\"_blank\" rel=\"external\">Java &amp; Kotlin</a></h3>\n<p>众所周知，Java是以Java岛来命名的。JetBrains团队在开发了十几年IntelliJ IDEA之后，爱恨交加，决定开发一门自己的语言，然后为了效仿Java一样用岛来命名，于是找到了位于圣彼得堡以西 30 公里处芬兰湾的一个科特林岛，英文就是 Kotlin，一门新的编程语言诞生了。</p>\n<h3 id=\"google-hadoop\"><a href=\"https://graphics.stanford.edu/~dk/google_name_origin.html\" target=\"_blank\" rel=\"external\">Google</a>, <a href=\"https://www.quora.com/Whats-the-origin-of-the-name-Hadoop\" target=\"_blank\" rel=\"external\">Hadoop</a></h3>\n<p>这两个都是生造出来的，原本并不存在。根据斯坦福教授\tDavid Koller<a href=\"https://graphics.stanford.edu/~dk/google_name_origin.html\" target=\"_blank\" rel=\"external\">回忆</a>，谷歌一开始的搜索引擎叫&quot;BackRub&quot;, 因其能分析web的&quot;back links&quot;。后来拉里佩奇一伙人在白板上尝试想出一个与大量数据索引有关的词。有人提出了&quot;googolplex&quot;，拉里佩奇觉得缩写&quot;googol&quot;（词意大概是10^100)更好，然后他同事Sean Anderson就去搜新的域名是否被注册了。但是，他在搜索的时候拼成了“<a href=\"http://google.com\" target=\"_blank\" rel=\"external\">google.com</a>”，发现可以用，后来拉里佩奇觉得这名字也不错，于是注册了这个域名。</p>\n<p>这也是为什么一直以来都有人质疑google的名字是打错了。</p>\n<p>而Hadoop更无厘头，根据作者Doug Cutting所说，这名字就是他儿子给一个毛绒象取得，但是觉得简短，好记，从没在别的地方用过，于是就拿来用了。</p>\n<h3 id=\"kubernetes-amp-helm\">kubernetes &amp; helm</h3>\n<p>Kubernetes是这两年大火的自动化部署、管理容器应用的系统，一般简称k8s。这个名字由来应该和Docker本身很有关系。Docker的logo是一条鲸鱼顶着一堆集装箱的图案,容器在这里被看成一个个的集装箱，相互独立隔绝。</p>\n<img src=\"https://tr4.cbsistatic.com/hub/i/r/2016/10/18/831f017c-ee68-4bd6-8a5c-ab31b4d35d6d/resize/770x/1cedcf2f03388a9720835a628a8a9765/dockerhero.jpg\" style=\"max-width: 50%\" alt=\"docker\">\n<p>Kubernetes在希腊语里面是舵手的意思，英文helmsman，象征掌管、运输着一个个集装箱，这也就是为什么我们会有<code>kubectl</code>（kubernetes control) 和 <code>helm</code>，而logo就是一个船的舵把。</p>\n<img src=\"https://kubernetes.io/images/favicon.png\" style=\"max-width: 50%\" alt=\"kubernetes\">\n<h3 id=\"gnus-not-unix\">GNU’s Not Unix</h3>\n<p>作为开源世界大名鼎鼎的操作系统以及项目，GNU的命名也是很极客范，全称是GNU的递归形式——GNU’s Not Unix, 无限自我调用展开。</p>\n<h3 id=\"ruby-amp-gem\"><a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\" rel=\"external\">Ruby</a> &amp; gem:</h3>\n<p>Ruby就是红宝石的意思，而作为它的包管理器和命令行工具，叫gem(宝石)也不奇怪啦。</p>\n<h3 id=\"vue-amp-react\"><a href=\"https://vuejs.org/v2/guide/\" target=\"_blank\" rel=\"external\">Vue</a> &amp; <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"external\">React</a>:</h3>\n<p>这两个前端框架（也许应该叫库）的取名直接就体现了他们自己代表的特点：</p>\n<ul>\n<li>\n<p>Vue 是 View 的法语，诞生之初就是基于MVVM的思想设计，但是强调核心库专注于view这一层，因此库如其名。</p>\n</li>\n<li>\n<p>React 也强调自己仅仅是View层，但是因为其强烈受函数式编程的思想，所以突出自己响应式，声明式，自然名字也是很符合了。</p>\n</li>\n</ul>\n<p>一直不知道Angular(有角的)取这名是为什么，难道想说明自己更迭并不平滑:)，相信从Angular.js到Angular的经历大家都能体会。</p>\n<h3 id=\"camel-case\"><a href=\"https://note.youdao.com/\" target=\"_blank\" rel=\"external\">camel case</a></h3>\n<p>驼峰命名法，其实这个名字也很形象了。因为变量命名一直是老大难，为了形象说明这个变量啥意思，经常要用好几个单词，所以一般把除掉第一个单词的首字母大写，比如 thisVariableSucks, 中间两个字母耸起，宛如驼峰，因此得名。</p>\n<h3 id=\"android\"><a href=\"https://www.android.com/\" target=\"_blank\" rel=\"external\">Android</a></h3>\n<p>安卓就是机器人的意思，但比较有意思的是它每一个版本代号的起名，基本都是谷歌公司一种糖果的名字：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cupcake(纸杯蛋糕)</td>\n<td>1.5</td>\n</tr>\n<tr>\n<td>Donut(甜甜圈)</td>\n<td>1.6</td>\n</tr>\n<tr>\n<td>Eclair(长形松饼)</td>\n<td>2.0–2.1</td>\n</tr>\n<tr>\n<td>Froyo(冻酸奶)</td>\n<td>2.2–2.2.3</td>\n</tr>\n<tr>\n<td>Gingerbread(姜饼)</td>\n<td>2.3–2.3.7</td>\n</tr>\n<tr>\n<td>Honeycomb（蜂窝）</td>\n<td>3.0–3.2.6</td>\n</tr>\n<tr>\n<td>Ice Cream Sandwich （冰淇淋三明治）</td>\n<td>4.0–4.0.4</td>\n</tr>\n<tr>\n<td>Jelly Bean （果冻豆）</td>\n<td>4.1–4.3.1</td>\n</tr>\n<tr>\n<td>KitKat（奇巧巧克力）</td>\n<td>4.4–4.4.4, 4.4W–4.4W.2</td>\n</tr>\n<tr>\n<td>Lollipop（棒棒糖）</td>\n<td>5.0–5.1.1</td>\n</tr>\n<tr>\n<td>Marshmallow（棉花糖）</td>\n<td>6.0–6.0.1</td>\n</tr>\n<tr>\n<td>Nougat（牛轧糖）</td>\n<td>7</td>\n</tr>\n<tr>\n<td>Oreo（奥利奥）</td>\n<td>8</td>\n</tr>\n<tr>\n<td>P （据说是Pistachio Ice Cream？）</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<p>当然，还有很多取名也非常有意思，比如</p>\n<ul>\n<li><a href=\"https://www.yahoo.com/\" target=\"_blank\" rel=\"external\">Yahoo!</a></li>\n<li><a href=\"https://www.python.org/\" target=\"_blank\" rel=\"external\">Python</a></li>\n<li><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">Postman</a></li>\n<li><a href=\"https://prometheus.io/\" target=\"_blank\" rel=\"external\">Prometheus</a></li>\n<li><a href=\"https://codepen.io/\" target=\"_blank\" rel=\"external\">codepen</a></li>\n</ul>\n<p>因为懒，不一一赘述。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>缘起一个关于CockroachDB的吐槽：<br>\n<img src=\"./trigger.png\" style=\"max-width: 50%\" alt=\"trigger\"></p>\n<p>然后觉得这名字起得实在太好。细想了一下，程序猿确实是一个极其有才华（闷骚）的群体，在软件领域，很多取名极富内涵且有趣。</p>\n<h3 id=\"a-href-https-www-cockroachlabs-com-cockroach-db-a\"><a href=\"https://www.cockroachlabs.com/\" target=\"_blank\" rel=\"external\">CockroachDB</a></h3>\n<p>一个专为云服务和分布式设计的数据库, 可以存储nosql的数据，又支持SQL语言，很受关注。但是同事抱怨每次看到这个名字，心里还是发毛。细想了一下，以cockroach(小强)作为一个分布式数据库，简直是形象地表露了好几个重要特征：</p>\n<ul>\n<li>分布式，无处不在</li>\n<li>高可用性，极其难杀死</li>\n<li>非常灵活</li>\n</ul>\n<h3 id=\"a-href-https-mp-weixin-qq-com-s-k-6-ntwv-9-gth-8-ge-e-dv-tz-wf-q-java-amp-kotlin-a\"><a href=\"https://mp.weixin.qq.com/s/K6NTWV9gth8Ge-eDvTzWfQ\" target=\"_blank\" rel=\"external\">Java &amp; Kotlin</a></h3>\n<p>众所周知，Java是以Java岛来命名的。JetBrains团队在开发了十几年IntelliJ IDEA之后，爱恨交加，决定开发一门自己的语言，然后为了效仿Java一样用岛来命名，于是找到了位于圣彼得堡以西 30 公里处芬兰湾的一个科特林岛，英文就是 Kotlin，一门新的编程语言诞生了。</p>\n<h3 id=\"a-href-https-graphics-stanford-edu-dk-google-name-origin-html-google-a-a-href-https-www-quora-com-whats-the-origin-of-the-name-hadoop-hadoop-a\"><a href=\"https://graphics.stanford.edu/~dk/google_name_origin.html\" target=\"_blank\" rel=\"external\">Google</a>, <a href=\"https://www.quora.com/Whats-the-origin-of-the-name-Hadoop\" target=\"_blank\" rel=\"external\">Hadoop</a></h3>\n<p>这两个都是生造出来的，原本并不存在。根据斯坦福教授\tDavid Koller<a href=\"https://graphics.stanford.edu/~dk/google_name_origin.html\" target=\"_blank\" rel=\"external\">回忆</a>，谷歌一开始的搜索引擎叫&quot;BackRub&quot;, 因其能分析web的&quot;back links&quot;。后来拉里佩奇一伙人在白板上尝试想出一个与大量数据索引有关的词。有人提出了&quot;googolplex&quot;，拉里佩奇觉得缩写&quot;googol&quot;（词意大概是10^100)更好，然后他同事Sean Anderson就去搜新的域名是否被注册了。但是，他在搜索的时候拼成了“<a href=\"http://google.com\" target=\"_blank\" rel=\"external\">google.com</a>”，发现可以用，后来拉里佩奇觉得这名字也不错，于是注册了这个域名。</p>\n<p>这也是为什么一直以来都有人质疑google的名字是打错了。</p>\n<p>而Hadoop更无厘头，根据作者Doug Cutting所说，这名字就是他儿子给一个毛绒象取得，但是觉得简短，好记，从没在别的地方用过，于是就拿来用了。</p>\n<h3 id=\"kubernetes-amp-helm\">kubernetes &amp; helm</h3>\n<p>Kubernetes是这两年大火的自动化部署、管理容器应用的系统，一般简称k8s。这个名字由来应该和Docker本身很有关系。Docker的logo是一条鲸鱼顶着一堆集装箱的图案,容器在这里被看成一个个的集装箱，相互独立隔绝。</p>\n<img src=\"https://tr4.cbsistatic.com/hub/i/r/2016/10/18/831f017c-ee68-4bd6-8a5c-ab31b4d35d6d/resize/770x/1cedcf2f03388a9720835a628a8a9765/dockerhero.jpg\" style=\"max-width: 50%\" alt=\"docker\">\n<p>Kubernetes在希腊语里面是舵手的意思，英文helmsman，象征掌管、运输着一个个集装箱，这也就是为什么我们会有<code>kubectl</code>（kubernetes control) 和 <code>helm</code>，而logo就是一个船的舵把。</p>\n<img src=\"https://kubernetes.io/images/favicon.png\" style=\"max-width: 50%\" alt=\"kubernetes\">\n<h3 id=\"gn-us-not-unix\">GNU’s Not Unix</h3>\n<p>作为开源世界大名鼎鼎的操作系统以及项目，GNU的命名也是很极客范，全称是GNU的递归形式——GNU’s Not Unix, 无限自我调用展开。</p>\n<h3 id=\"a-href-https-www-ruby-lang-org-en-ruby-a-amp-gem\"><a href=\"https://www.ruby-lang.org/en/\" target=\"_blank\" rel=\"external\">Ruby</a> &amp; gem:</h3>\n<p>Ruby就是红宝石的意思，而作为它的包管理器和命令行工具，叫gem(宝石)也不奇怪啦。</p>\n<h3 id=\"a-href-https-vuejs-org-v-2-guide-vue-a-amp-a-href-https-reactjs-org-react-a\"><a href=\"https://vuejs.org/v2/guide/\" target=\"_blank\" rel=\"external\">Vue</a> &amp; <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"external\">React</a>:</h3>\n<p>这两个前端框架（也许应该叫库）的取名直接就体现了他们自己代表的特点：</p>\n<ul>\n<li>\n<p>Vue 是 View 的法语，诞生之初就是基于MVVM的思想设计，但是强调核心库专注于view这一层，因此库如其名。</p>\n</li>\n<li>\n<p>React 也强调自己仅仅是View层，但是因为其强烈受函数式编程的思想，所以突出自己响应式，声明式，自然名字也是很符合了。</p>\n</li>\n</ul>\n<p>一直不知道Angular(有角的)取这名是为什么，难道想说明自己更迭并不平滑:)，相信从Angular.js到Angular的经历大家都能体会。</p>\n<h3 id=\"a-href-https-note-youdao-com-camel-case-a\"><a href=\"https://note.youdao.com/\" target=\"_blank\" rel=\"external\">camel case</a></h3>\n<p>驼峰命名法，其实这个名字也很形象了。因为变量命名一直是老大难，为了形象说明这个变量啥意思，经常要用好几个单词，所以一般把除掉第一个单词的首字母大写，比如 thisVariableSucks, 中间两个字母耸起，宛如驼峰，因此得名。</p>\n<h3 id=\"a-href-https-www-android-com-android-a\"><a href=\"https://www.android.com/\" target=\"_blank\" rel=\"external\">Android</a></h3>\n<p>安卓就是机器人的意思，但比较有意思的是它每一个版本代号的起名，基本都是谷歌公司一种糖果的名字：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cupcake(纸杯蛋糕)</td>\n<td>1.5</td>\n</tr>\n<tr>\n<td>Donut(甜甜圈)</td>\n<td>1.6</td>\n</tr>\n<tr>\n<td>Eclair(长形松饼)</td>\n<td>2.0–2.1</td>\n</tr>\n<tr>\n<td>Froyo(冻酸奶)</td>\n<td>2.2–2.2.3</td>\n</tr>\n<tr>\n<td>Gingerbread(姜饼)</td>\n<td>2.3–2.3.7</td>\n</tr>\n<tr>\n<td>Honeycomb（蜂窝）</td>\n<td>3.0–3.2.6</td>\n</tr>\n<tr>\n<td>Ice Cream Sandwich （冰淇淋三明治）</td>\n<td>4.0–4.0.4</td>\n</tr>\n<tr>\n<td>Jelly Bean （果冻豆）</td>\n<td>4.1–4.3.1</td>\n</tr>\n<tr>\n<td>KitKat（奇巧巧克力）</td>\n<td>4.4–4.4.4, 4.4W–4.4W.2</td>\n</tr>\n<tr>\n<td>Lollipop（棒棒糖）</td>\n<td>5.0–5.1.1</td>\n</tr>\n<tr>\n<td>Marshmallow（棉花糖）</td>\n<td>6.0–6.0.1</td>\n</tr>\n<tr>\n<td>Nougat（牛轧糖）</td>\n<td>7</td>\n</tr>\n<tr>\n<td>Oreo（奥利奥）</td>\n<td>8</td>\n</tr>\n<tr>\n<td>P （据说是Pistachio Ice Cream？）</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<p>当然，还有很多取名也非常有意思，比如</p>\n<ul>\n<li><a href=\"https://www.yahoo.com/\" target=\"_blank\" rel=\"external\">Yahoo!</a></li>\n<li><a href=\"https://www.python.org/\" target=\"_blank\" rel=\"external\">Python</a></li>\n<li><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">Postman</a></li>\n<li><a href=\"https://prometheus.io/\" target=\"_blank\" rel=\"external\">Prometheus</a></li>\n<li><a href=\"https://codepen.io/\" target=\"_blank\" rel=\"external\">codepen</a></li>\n</ul>\n<p>因为懒，不一一赘述。</p>\n"},{"title":"JavaScript-Flaws","catalog":true,"date":"2017-02-08T01:49:46.000Z","subtitle":"The bad parts","header-img":"centralPark.jpg","_content":"\n\n> Javascript design flaws and wired parts\n\n### JavaScript flaws\n\nJavaScript is the most dominant programming language for the web. Powerful as it is, JavaScript has many design flaws that may cause confusions for both newbie and seasoned developers . So it's worth making a summary here.\n\n### Data type and variables\n\n* `NaN` can not be compared with any number, like ` NaN === NaN; // false`, the only way to check is by using `isNaN()`: \n\n```js \nisNaN(NaN); // true \n```\n\n* `null` and `undefined`: The undefined value is a primitive value used when a variable has not been assigned a value. The null value is a primitive value that represents the null, empty, or non-existent reference.\n\n* If a variable is defined without `var`, it is set to be a global variable, which may cause some errors that are hard to debug. This problem can be solved by adding `'use strict';` in the first line\n\n\n### Strings\nStrings are imutable, like\n```js\nvar s = 'Test';\ns[0] = 'X';     \nalert(s); // s is still 'Test'    \n```\n\n\n### in operator\n\n**in** can only be used to check whether a prop is in an object like:\n\n```js\n// Arrays\nvar trees = ['redwood', 'bay', 'cedar', 'oak', 'maple'];\n0 in trees        // returns true\n3 in trees        // returns true\n6 in trees        // returns false\n'bay' in trees    // returns false (you must specify the \n                  // index number, not the value at that index)\n'length' in trees // returns true (length is an Array property)\nSymbol.iterator in trees // returns true (arrays are iterable, works only in ES2015+)\n\n// Predefined objects\n'PI' in Math          // returns true\n\n// Custom objects\nvar mycar = {make: 'Honda', model: 'Accord', year: 1998};\n'make' in mycar  // returns true   \n```\nIt has different function than 'in' in Python, whether **in** can be used to check element existence.\n\n### Conditions\nJavaScript uses `if () { ... } else { ... }` to set conditions. But if there is only one statement in a block, `{}` can be removed. like\n```js\nvar age = 20;\nif (age >= 18)\n    alert('adult');\nelse\n    alert('teenager');\n```\nHowever, there are risks doing this:\n```js\nvar age = 20;\nif (age >= 18)\n    alert('adult');\nelse\n    console.log('age < 18');\n    alert('teenager'); // this line is actually not inside else\n```\nSo it is better to always include `{}`\n\n### Loops\n\n- \"foreach\" vs \"for of\" vs \"for in\"\n    - `foreach` is an method that is available only in Array objects. It allows you to iterate through elements of an array. When invoked it takes a callback function and invokes the callback once for every array element. The callback can access both index and value of the array elements. foreach is available only for looping arrays.\n    -  `for of` is a new way for iterating collections. Its introduced in ES6. Earlier you had to use for or while loop to iterate through elements of an collection. For for of to work on an collection, the collection must have an [Symbol.iterator] property.\n    - `for in` is used to loop through properties of an object. It can be any object. for in allows you to access the keys of the object but doesn’t provide reference to the values. In JavaScript object properties themselves have internal properties. One of the internal properties is [[Enumerable]]. for in will only walkthrough a property if it has [[Enumerbale]] set to true. It not used to iterate elements of an collection rather used to iterate properties of objects. For example:\n        ```js\n        var a = ['A', 'B', 'C'];\n        for (var i in a) {\n            alert(i); // '0', '1', '2'\n            alert(a[i]); // 'A', 'B', 'C'\n        }\n        \n        ```\n\n### Map and Set\nIn JavaScript, Map can be inplemented with Object`{}`, buy the key has to be a string. So ES6 introduced a new type `Map`.\n[Map Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\n\n### Objects\nThe property name has to be a valid name in order to let `Objects.property` to access. For example,\n```js\nvar me = {\n    name: 'henry'\n    \"university\": \"UD\"\n}\n```\n`\"university\"` is not a valid property name here, so it has to be accessed by\n`me['university']`. But name can be accessed by `me.name`\n\n- \"this\" key word:\n    The this object is bound at runtime based on the context in which a function is executed:\n    - when used inside global functions,this is equal to window in nostrict mode and undefinedin strict mode.\n    - whereas this is equal to the object when called as an object method.\n    - as a constructor\n    - call and apply\n    - bound functions\n    - as dom event handler\n\nthis will point to global object:\n```js\nfunction a() {\n    console.log(this);\n    this.newvariable = 'hello';\n}\n\nvar b = function() {\n    console.log(this);   \n}\n\na();\nconsole.log(newvariable);\n```\nWhen a global function is called, `this`will point to the window. Likewise, 'this' inside a function which is inside another function will be attached to the global object. \n\nIn order to solve this problem, \"self\" or \"that\" is introduced:\n```js\nvar c = {\n    name: 'The c object',\n    log: function() {\n        var self = this;\n        \n        self.name = 'Updated c object';\n        console.log(self);\n        \n        var setname = function(newname) {\n            self.name = newname;   \n        }\n        setname('Updated again! The c object');\n        console.log(self);\n    }\n}\n\nc.log();\n```\nSelf points to the object c. When ‘setname’ is called, the js will look at the scope chain and find c.\n\n\n\n","source":"_posts/JavaScript-Flaws.md","raw":"---\ntitle: JavaScript-Flaws\ncatalog: true\ndate: 2017-2-7 20:49:46\nsubtitle: The bad parts\nheader-img: \"centralPark.jpg\"\ntags:\n- JavaScript\n---\n\n\n> Javascript design flaws and wired parts\n\n### JavaScript flaws\n\nJavaScript is the most dominant programming language for the web. Powerful as it is, JavaScript has many design flaws that may cause confusions for both newbie and seasoned developers . So it's worth making a summary here.\n\n### Data type and variables\n\n* `NaN` can not be compared with any number, like ` NaN === NaN; // false`, the only way to check is by using `isNaN()`: \n\n```js \nisNaN(NaN); // true \n```\n\n* `null` and `undefined`: The undefined value is a primitive value used when a variable has not been assigned a value. The null value is a primitive value that represents the null, empty, or non-existent reference.\n\n* If a variable is defined without `var`, it is set to be a global variable, which may cause some errors that are hard to debug. This problem can be solved by adding `'use strict';` in the first line\n\n\n### Strings\nStrings are imutable, like\n```js\nvar s = 'Test';\ns[0] = 'X';     \nalert(s); // s is still 'Test'    \n```\n\n\n### in operator\n\n**in** can only be used to check whether a prop is in an object like:\n\n```js\n// Arrays\nvar trees = ['redwood', 'bay', 'cedar', 'oak', 'maple'];\n0 in trees        // returns true\n3 in trees        // returns true\n6 in trees        // returns false\n'bay' in trees    // returns false (you must specify the \n                  // index number, not the value at that index)\n'length' in trees // returns true (length is an Array property)\nSymbol.iterator in trees // returns true (arrays are iterable, works only in ES2015+)\n\n// Predefined objects\n'PI' in Math          // returns true\n\n// Custom objects\nvar mycar = {make: 'Honda', model: 'Accord', year: 1998};\n'make' in mycar  // returns true   \n```\nIt has different function than 'in' in Python, whether **in** can be used to check element existence.\n\n### Conditions\nJavaScript uses `if () { ... } else { ... }` to set conditions. But if there is only one statement in a block, `{}` can be removed. like\n```js\nvar age = 20;\nif (age >= 18)\n    alert('adult');\nelse\n    alert('teenager');\n```\nHowever, there are risks doing this:\n```js\nvar age = 20;\nif (age >= 18)\n    alert('adult');\nelse\n    console.log('age < 18');\n    alert('teenager'); // this line is actually not inside else\n```\nSo it is better to always include `{}`\n\n### Loops\n\n- \"foreach\" vs \"for of\" vs \"for in\"\n    - `foreach` is an method that is available only in Array objects. It allows you to iterate through elements of an array. When invoked it takes a callback function and invokes the callback once for every array element. The callback can access both index and value of the array elements. foreach is available only for looping arrays.\n    -  `for of` is a new way for iterating collections. Its introduced in ES6. Earlier you had to use for or while loop to iterate through elements of an collection. For for of to work on an collection, the collection must have an [Symbol.iterator] property.\n    - `for in` is used to loop through properties of an object. It can be any object. for in allows you to access the keys of the object but doesn’t provide reference to the values. In JavaScript object properties themselves have internal properties. One of the internal properties is [[Enumerable]]. for in will only walkthrough a property if it has [[Enumerbale]] set to true. It not used to iterate elements of an collection rather used to iterate properties of objects. For example:\n        ```js\n        var a = ['A', 'B', 'C'];\n        for (var i in a) {\n            alert(i); // '0', '1', '2'\n            alert(a[i]); // 'A', 'B', 'C'\n        }\n        \n        ```\n\n### Map and Set\nIn JavaScript, Map can be inplemented with Object`{}`, buy the key has to be a string. So ES6 introduced a new type `Map`.\n[Map Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\n\n### Objects\nThe property name has to be a valid name in order to let `Objects.property` to access. For example,\n```js\nvar me = {\n    name: 'henry'\n    \"university\": \"UD\"\n}\n```\n`\"university\"` is not a valid property name here, so it has to be accessed by\n`me['university']`. But name can be accessed by `me.name`\n\n- \"this\" key word:\n    The this object is bound at runtime based on the context in which a function is executed:\n    - when used inside global functions,this is equal to window in nostrict mode and undefinedin strict mode.\n    - whereas this is equal to the object when called as an object method.\n    - as a constructor\n    - call and apply\n    - bound functions\n    - as dom event handler\n\nthis will point to global object:\n```js\nfunction a() {\n    console.log(this);\n    this.newvariable = 'hello';\n}\n\nvar b = function() {\n    console.log(this);   \n}\n\na();\nconsole.log(newvariable);\n```\nWhen a global function is called, `this`will point to the window. Likewise, 'this' inside a function which is inside another function will be attached to the global object. \n\nIn order to solve this problem, \"self\" or \"that\" is introduced:\n```js\nvar c = {\n    name: 'The c object',\n    log: function() {\n        var self = this;\n        \n        self.name = 'Updated c object';\n        console.log(self);\n        \n        var setname = function(newname) {\n            self.name = newname;   \n        }\n        setname('Updated again! The c object');\n        console.log(self);\n    }\n}\n\nc.log();\n```\nSelf points to the object c. When ‘setname’ is called, the js will look at the scope chain and find c.\n\n\n\n","slug":"JavaScript-Flaws","published":1,"updated":"2017-12-19T02:01:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfj2ljtb0008deu5l6mzmivj","content":"<blockquote>\n<p>Javascript design flaws and wired parts</p>\n</blockquote>\n<h3 id=\"javascript-flaws\">JavaScript flaws</h3>\n<p>JavaScript is the most dominant programming language for the web. Powerful as it is, JavaScript has many design flaws that may cause confusions for both newbie and seasoned developers . So it’s worth making a summary here.</p>\n<h3 id=\"data-type-and-variables\">Data type and variables</h3>\n<ul>\n<li><code>NaN</code> can not be compared with any number, like <code>NaN === NaN; // false</code>, the only way to check is by using <code>isNaN()</code>:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>null</code> and <code>undefined</code>: The undefined value is a primitive value used when a variable has not been assigned a value. The null value is a primitive value that represents the null, empty, or non-existent reference.</p>\n</li>\n<li>\n<p>If a variable is defined without <code>var</code>, it is set to be a global variable, which may cause some errors that are hard to debug. This problem can be solved by adding <code>'use strict';</code> in the first line</p>\n</li>\n</ul>\n<h3 id=\"strings\">Strings</h3>\n<p>Strings are imutable, like</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Test'</span>;</span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"string\">'X'</span>;     </span><br><span class=\"line\">alert(s); <span class=\"comment\">// s is still 'Test'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"in-operator\">in operator</h3>\n<p><strong>in</strong> can only be used to check whether a prop is in an object like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Arrays</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> trees = [<span class=\"string\">'redwood'</span>, <span class=\"string\">'bay'</span>, <span class=\"string\">'cedar'</span>, <span class=\"string\">'oak'</span>, <span class=\"string\">'maple'</span>];</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> trees        <span class=\"comment\">// returns true</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">in</span> trees        <span class=\"comment\">// returns true</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"keyword\">in</span> trees        <span class=\"comment\">// returns false</span></span><br><span class=\"line\"><span class=\"string\">'bay'</span> <span class=\"keyword\">in</span> trees    <span class=\"comment\">// returns false (you must specify the </span></span><br><span class=\"line\">                  <span class=\"comment\">// index number, not the value at that index)</span></span><br><span class=\"line\"><span class=\"string\">'length'</span> <span class=\"keyword\">in</span> trees <span class=\"comment\">// returns true (length is an Array property)</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.iterator <span class=\"keyword\">in</span> trees <span class=\"comment\">// returns true (arrays are iterable, works only in ES2015+)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Predefined objects</span></span><br><span class=\"line\"><span class=\"string\">'PI'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">Math</span>          <span class=\"comment\">// returns true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Custom objects</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mycar = &#123;<span class=\"attr\">make</span>: <span class=\"string\">'Honda'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'Accord'</span>, <span class=\"attr\">year</span>: <span class=\"number\">1998</span>&#125;;</span><br><span class=\"line\"><span class=\"string\">'make'</span> <span class=\"keyword\">in</span> mycar  <span class=\"comment\">// returns true</span></span><br></pre></td></tr></table></figure>\n<p>It has different function than ‘in’ in Python, whether <strong>in</strong> can be used to check element existence.</p>\n<h3 id=\"conditions\">Conditions</h3>\n<p>JavaScript uses <code>if () { ... } else { ... }</code> to set conditions. But if there is only one statement in a block, <code>{}</code> can be removed. like</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>)</span><br><span class=\"line\">    alert(<span class=\"string\">'adult'</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    alert(<span class=\"string\">'teenager'</span>);</span><br></pre></td></tr></table></figure>\n<p>However, there are risks doing this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>)</span><br><span class=\"line\">    alert(<span class=\"string\">'adult'</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'age &lt; 18'</span>);</span><br><span class=\"line\">    alert(<span class=\"string\">'teenager'</span>); <span class=\"comment\">// this line is actually not inside else</span></span><br></pre></td></tr></table></figure>\n<p>So it is better to always include <code>{}</code></p>\n<h3 id=\"loops\">Loops</h3>\n<ul>\n<li>“foreach” vs “for of” vs “for in”\n<ul>\n<li><code>foreach</code> is an method that is available only in Array objects. It allows you to iterate through elements of an array. When invoked it takes a callback function and invokes the callback once for every array element. The callback can access both index and value of the array elements. foreach is available only for looping arrays.</li>\n<li><code>for of</code> is a new way for iterating collections. Its introduced in ES6. Earlier you had to use for or while loop to iterate through elements of an collection. For for of to work on an collection, the collection must have an [Symbol.iterator] property.</li>\n<li><code>for in</code> is used to loop through properties of an object. It can be any object. for in allows you to access the keys of the object but doesn’t provide reference to the values. In JavaScript object properties themselves have internal properties. One of the internal properties is [[Enumerable]]. for in will only walkthrough a property if it has [[Enumerbale]] set to true. It not used to iterate elements of an collection rather used to iterate properties of objects. For example:  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">    alert(i); <span class=\"comment\">// '0', '1', '2'</span></span><br><span class=\"line\">    alert(a[i]); <span class=\"comment\">// 'A', 'B', 'C'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"map-and-set\">Map and Set</h3>\n<p>In JavaScript, Map can be inplemented with Object<code>{}</code>, buy the key has to be a string. So ES6 introduced a new type <code>Map</code>.<br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"external\">Map Reference</a></p>\n<h3 id=\"objects\">Objects</h3>\n<p>The property name has to be a valid name in order to let <code>Objects.property</code> to access. For example,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> me = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'henry'</span></span><br><span class=\"line\">    <span class=\"string\">\"university\"</span>: <span class=\"string\">\"UD\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>&quot;university&quot;</code> is not a valid property name here, so it has to be accessed by<br>\n<code>me['university']</code>. But name can be accessed by <code>me.name</code></p>\n<ul>\n<li>“this” key word:<br>\nThe this object is bound at runtime based on the context in which a function is executed:\n<ul>\n<li>when used inside global functions,this is equal to window in nostrict mode and undefinedin strict mode.</li>\n<li>whereas this is equal to the object when called as an object method.</li>\n<li>as a constructor</li>\n<li>call and apply</li>\n<li>bound functions</li>\n<li>as dom event handler</li>\n</ul>\n</li>\n</ul>\n<p>this will point to global object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newvariable = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newvariable);</span><br></pre></td></tr></table></figure>\n<p>When a global function is called, <code>this</code>will point to the window. Likewise, ‘this’ inside a function which is inside another function will be attached to the global object.</p>\n<p>In order to solve this problem, “self” or “that” is introduced:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'The c object'</span>,</span><br><span class=\"line\">    log: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.name = <span class=\"string\">'Updated c object'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(self);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> setname = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newname</span>) </span>&#123;</span><br><span class=\"line\">            self.name = newname;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setname(<span class=\"string\">'Updated again! The c object'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(self);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">c.log();</span><br></pre></td></tr></table></figure>\n<p>Self points to the object c. When ‘setname’ is called, the js will look at the scope chain and find c.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Javascript design flaws and wired parts</p>\n</blockquote>\n<h3 id=\"java-script-flaws\">JavaScript flaws</h3>\n<p>JavaScript is the most dominant programming language for the web. Powerful as it is, JavaScript has many design flaws that may cause confusions for both newbie and seasoned developers . So it’s worth making a summary here.</p>\n<h3 id=\"data-type-and-variables\">Data type and variables</h3>\n<ul>\n<li><code>NaN</code> can not be compared with any number, like <code>NaN === NaN; // false</code>, the only way to check is by using <code>isNaN()</code>:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>null</code> and <code>undefined</code>: The undefined value is a primitive value used when a variable has not been assigned a value. The null value is a primitive value that represents the null, empty, or non-existent reference.</p>\n</li>\n<li>\n<p>If a variable is defined without <code>var</code>, it is set to be a global variable, which may cause some errors that are hard to debug. This problem can be solved by adding <code>'use strict';</code> in the first line</p>\n</li>\n</ul>\n<h3 id=\"strings\">Strings</h3>\n<p>Strings are imutable, like</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Test'</span>;</span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"string\">'X'</span>;     </span><br><span class=\"line\">alert(s); <span class=\"comment\">// s is still 'Test'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"in-operator\">in operator</h3>\n<p><strong>in</strong> can only be used to check whether a prop is in an object like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Arrays</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> trees = [<span class=\"string\">'redwood'</span>, <span class=\"string\">'bay'</span>, <span class=\"string\">'cedar'</span>, <span class=\"string\">'oak'</span>, <span class=\"string\">'maple'</span>];</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> trees        <span class=\"comment\">// returns true</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">in</span> trees        <span class=\"comment\">// returns true</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"keyword\">in</span> trees        <span class=\"comment\">// returns false</span></span><br><span class=\"line\"><span class=\"string\">'bay'</span> <span class=\"keyword\">in</span> trees    <span class=\"comment\">// returns false (you must specify the </span></span><br><span class=\"line\">                  <span class=\"comment\">// index number, not the value at that index)</span></span><br><span class=\"line\"><span class=\"string\">'length'</span> <span class=\"keyword\">in</span> trees <span class=\"comment\">// returns true (length is an Array property)</span></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.iterator <span class=\"keyword\">in</span> trees <span class=\"comment\">// returns true (arrays are iterable, works only in ES2015+)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Predefined objects</span></span><br><span class=\"line\"><span class=\"string\">'PI'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">Math</span>          <span class=\"comment\">// returns true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Custom objects</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mycar = &#123;<span class=\"attr\">make</span>: <span class=\"string\">'Honda'</span>, <span class=\"attr\">model</span>: <span class=\"string\">'Accord'</span>, <span class=\"attr\">year</span>: <span class=\"number\">1998</span>&#125;;</span><br><span class=\"line\"><span class=\"string\">'make'</span> <span class=\"keyword\">in</span> mycar  <span class=\"comment\">// returns true</span></span><br></pre></td></tr></table></figure>\n<p>It has different function than ‘in’ in Python, whether <strong>in</strong> can be used to check element existence.</p>\n<h3 id=\"conditions\">Conditions</h3>\n<p>JavaScript uses <code>if () { ... } else { ... }</code> to set conditions. But if there is only one statement in a block, <code>{}</code> can be removed. like</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>)</span><br><span class=\"line\">    alert(<span class=\"string\">'adult'</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    alert(<span class=\"string\">'teenager'</span>);</span><br></pre></td></tr></table></figure>\n<p>However, there are risks doing this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>)</span><br><span class=\"line\">    alert(<span class=\"string\">'adult'</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'age &lt; 18'</span>);</span><br><span class=\"line\">    alert(<span class=\"string\">'teenager'</span>); <span class=\"comment\">// this line is actually not inside else</span></span><br></pre></td></tr></table></figure>\n<p>So it is better to always include <code>{}</code></p>\n<h3 id=\"loops\">Loops</h3>\n<ul>\n<li>“foreach” vs “for of” vs “for in”\n<ul>\n<li><code>foreach</code> is an method that is available only in Array objects. It allows you to iterate through elements of an array. When invoked it takes a callback function and invokes the callback once for every array element. The callback can access both index and value of the array elements. foreach is available only for looping arrays.</li>\n<li><code>for of</code> is a new way for iterating collections. Its introduced in ES6. Earlier you had to use for or while loop to iterate through elements of an collection. For for of to work on an collection, the collection must have an [Symbol.iterator] property.</li>\n<li><code>for in</code> is used to loop through properties of an object. It can be any object. for in allows you to access the keys of the object but doesn’t provide reference to the values. In JavaScript object properties themselves have internal properties. One of the internal properties is [[Enumerable]]. for in will only walkthrough a property if it has [[Enumerbale]] set to true. It not used to iterate elements of an collection rather used to iterate properties of objects. For example:  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">    alert(i); <span class=\"comment\">// '0', '1', '2'</span></span><br><span class=\"line\">    alert(a[i]); <span class=\"comment\">// 'A', 'B', 'C'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"map-and-set\">Map and Set</h3>\n<p>In JavaScript, Map can be inplemented with Object<code>{}</code>, buy the key has to be a string. So ES6 introduced a new type <code>Map</code>.<br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"external\">Map Reference</a></p>\n<h3 id=\"objects\">Objects</h3>\n<p>The property name has to be a valid name in order to let <code>Objects.property</code> to access. For example,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> me = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'henry'</span></span><br><span class=\"line\">    <span class=\"string\">\"university\"</span>: <span class=\"string\">\"UD\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>&quot;university&quot;</code> is not a valid property name here, so it has to be accessed by<br>\n<code>me['university']</code>. But name can be accessed by <code>me.name</code></p>\n<ul>\n<li>“this” key word:<br>\nThe this object is bound at runtime based on the context in which a function is executed:\n<ul>\n<li>when used inside global functions,this is equal to window in nostrict mode and undefinedin strict mode.</li>\n<li>whereas this is equal to the object when called as an object method.</li>\n<li>as a constructor</li>\n<li>call and apply</li>\n<li>bound functions</li>\n<li>as dom event handler</li>\n</ul>\n</li>\n</ul>\n<p>this will point to global object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newvariable = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newvariable);</span><br></pre></td></tr></table></figure>\n<p>When a global function is called, <code>this</code>will point to the window. Likewise, ‘this’ inside a function which is inside another function will be attached to the global object.</p>\n<p>In order to solve this problem, “self” or “that” is introduced:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'The c object'</span>,</span><br><span class=\"line\">    log: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.name = <span class=\"string\">'Updated c object'</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(self);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> setname = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newname</span>) </span>&#123;</span><br><span class=\"line\">            self.name = newname;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setname(<span class=\"string\">'Updated again! The c object'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(self);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">c.log();</span><br></pre></td></tr></table></figure>\n<p>Self points to the object c. When ‘setname’ is called, the js will look at the scope chain and find c.</p>\n"},{"title":"Python-Collections-And-Tricks","catalog":true,"date":"2017-05-23T01:01:50.000Z","subtitle":"Being pythonic","header-img":"us_map.JPG","_content":"\n> Introduction of Python unique data structures of high performance and summary of pythonic ways of coding\n\n## Python collections\n> Here is [collection ducumentation](https://docs.python.org/2.7/library/collections.html#collections.ChainMap)\n\nBesides `list`, `dictionary`, `tuple`, python provides some high-performance container datatypes in the module `collections`, which I find extremely useful when dealing with hashtable or stack problems. You can always implement these by using basic `list` or `dictionary`, but it really eases your life if you know their existence and are familiar with their APIs beforehand.\n\n### deque (pronounced \"deck\", not \"D-queue\")\nDeque is basically a double-ended-queue structure and supports efficient operations like appends and pops from both sides. It has totally same operations as `list`, but runs in O(1) in operations like pop(0), appendleft(x).\n\n**To initialize**: It takes a iterable and a maxlen. From official document:\n\n>If maxlen is not specified or is None, deques may grow to an arbitrary length. Otherwise, the deque is bounded to the specified maximum length. Once a bounded length deque is full, when new items are added, a corresponding number of items are discarded from the opposite end.\n\n```py\ndeque = collections.deque([],maxlen=3)\nfor i in range(4):\n    deque.append(i)\nprint deque # deque([1, 2, 3], maxlen=3)    \n```\n\n**List of methods from official document**:\n\n- append(x): Add x to the right side of the deque.\n\n- appendleft(x): Add x to the left side of the deque.\n\n- clear():Remove all elements from the deque leaving it with length 0.\n\n- count(x): Count the number of deque elements equal to x.\n\n- extend(iterable): Extend the right side of the deque by appending elements from the iterable argument.\n\n  - if you extend a string, it will treat every char as an element\n```py\nfor i in range(4):\n    deque.append(i)\ndeque.extend(\"[4,5,6]\")\nprint deque # deque([0, 1, 2, 3, '[', '4', ',', '5', ',', '6', ']'])\n```\n\n- extendleft(iterable):\nExtend the left side of the deque by appending elements from iterable. Note, the series of left appends results in reversing the order of elements in the iterable argument.\n\n- pop(): Remove and return an element from the right side of the deque. If no elements are present, raises an IndexError.\n\n- popleft(): Remove and return an element from the left side of the deque. If no elements are present, raises an IndexError.\n\n- remove(value): Removed the first occurrence of value. If not found, raises a ValueError.\n\n- reverse(): Reverse the elements of the deque in-place and then return None.\n\n- rotate(n): Rotate the deque n steps to the right. If n is negative, rotate to the left. Rotating one step to the right is equivalent to: d.appendleft(d.pop()).\n\n### OrderedDict\nIf you want to keep the order of the items you insert into a dictionary, `OrderedDict` is the one you need.\n\n ```py\n>>> # regular unsorted dictionary\n>>> d = {'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2}\n\n>>> # dictionary sorted by key\n>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))\nOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n\n>>> # dictionary sorted by value\n>>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n\n>>> # dictionary sorted by length of the key string\n>>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))\nOrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])\n```\n\n**OrderedDict.popitem(last=True)**\nThe popitem() method for ordered dictionaries returns and removes a (key, value) pair. The pairs are returned in LIFO order if last is true or FIFO order if false.\n(This method could be very useful in LRU cache design)\n\n### defaultdict\nThis datatype provides a factory function to store customized key-value pairs into dictionaries.\nFrom doc:\n\nIt is easy to group a sequence of key-value pairs into a dictionary of lists:\n```py\n>>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]\n>>> d = defaultdict(list)\n>>> for k, v in s:\n...     d[k].append(v)\n...\n>>> d.items()\n[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]\n```\n\nThis technique is simpler and faster than an equivalent technique using dict.setdefault():\n\n```py\n>>> d = {}\n>>> for k, v in s:\n...     d.setdefault(k, []).append(v)\n...\n>>> d.items()\n[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]\n```\n\n### heapq\n\n\n\n## Tricks\n(to be filled)\n\n### sorted()\n\n### enumerate()\n\nIt is an efficient way to loop through a list and get the index and value at the same time.\n\n```py\nenumerate(sequence, start=0) # start is optional, from 0 as default\n>>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n>>> list(enumerate(seasons))\n[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n>>> list(enumerate(seasons, start=1))\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n```\n\n### zip()\n\n### list comprehesion\n\nPython provides a very natural way to construct list, no matter what dimension.\n\n##### Basic syntax:\n\n```py\n[ expression for item in list if conditional ]\n```\n\nwhich is equivalent to\n\n```py\n\nfor item in list:\n    if conditional:\n        expression\n\n```\n\nso to initialize an empty 2D array in python is:\n```py\n\n# Creates a list containing 5 lists, each of 8 items, all set to 0\nw, h = 8, 5;\nMatrix = [[0 for x in range(w)] for y in range(h)]\n\n```\n\nbut note here, *append* does not work as expected in list comprehension, it only mutates array rather than returns value:\n```py\na = [[1,2],[3,4],[5,6]]\na = [x.append('a') for x in a]\n# return  [None,None,None]\n```\n\nanother example:\n<script src=\"https://gist.github.com/HanchengZhao/69e152c12509806653061c95c66d0ada.js\"></script>\n\nHere it returns the first node in a value list of a dictionary that has more than 1 node. `if node[1]` will cause `IndexError: list index out of range`, but `if node[1:]` works.\n\n### sort() and sorted()\nsort() sorts objects of list, it does not return list. So you can not use `''.join(list(str).sort())` to sort string. Instead, you can try `''.join(sorted(str))` because sorted will return a new sorted list from the items in iterable.","source":"_posts/Python-Collections-And-Tricks.md","raw":"---\ntitle: Python-Collections-And-Tricks\ncatalog: true\ndate: 2017-5-22 21:01:50\nsubtitle: Being pythonic\nheader-img: \"us_map.JPG\"\ntags:\n- python\n---\n\n> Introduction of Python unique data structures of high performance and summary of pythonic ways of coding\n\n## Python collections\n> Here is [collection ducumentation](https://docs.python.org/2.7/library/collections.html#collections.ChainMap)\n\nBesides `list`, `dictionary`, `tuple`, python provides some high-performance container datatypes in the module `collections`, which I find extremely useful when dealing with hashtable or stack problems. You can always implement these by using basic `list` or `dictionary`, but it really eases your life if you know their existence and are familiar with their APIs beforehand.\n\n### deque (pronounced \"deck\", not \"D-queue\")\nDeque is basically a double-ended-queue structure and supports efficient operations like appends and pops from both sides. It has totally same operations as `list`, but runs in O(1) in operations like pop(0), appendleft(x).\n\n**To initialize**: It takes a iterable and a maxlen. From official document:\n\n>If maxlen is not specified or is None, deques may grow to an arbitrary length. Otherwise, the deque is bounded to the specified maximum length. Once a bounded length deque is full, when new items are added, a corresponding number of items are discarded from the opposite end.\n\n```py\ndeque = collections.deque([],maxlen=3)\nfor i in range(4):\n    deque.append(i)\nprint deque # deque([1, 2, 3], maxlen=3)    \n```\n\n**List of methods from official document**:\n\n- append(x): Add x to the right side of the deque.\n\n- appendleft(x): Add x to the left side of the deque.\n\n- clear():Remove all elements from the deque leaving it with length 0.\n\n- count(x): Count the number of deque elements equal to x.\n\n- extend(iterable): Extend the right side of the deque by appending elements from the iterable argument.\n\n  - if you extend a string, it will treat every char as an element\n```py\nfor i in range(4):\n    deque.append(i)\ndeque.extend(\"[4,5,6]\")\nprint deque # deque([0, 1, 2, 3, '[', '4', ',', '5', ',', '6', ']'])\n```\n\n- extendleft(iterable):\nExtend the left side of the deque by appending elements from iterable. Note, the series of left appends results in reversing the order of elements in the iterable argument.\n\n- pop(): Remove and return an element from the right side of the deque. If no elements are present, raises an IndexError.\n\n- popleft(): Remove and return an element from the left side of the deque. If no elements are present, raises an IndexError.\n\n- remove(value): Removed the first occurrence of value. If not found, raises a ValueError.\n\n- reverse(): Reverse the elements of the deque in-place and then return None.\n\n- rotate(n): Rotate the deque n steps to the right. If n is negative, rotate to the left. Rotating one step to the right is equivalent to: d.appendleft(d.pop()).\n\n### OrderedDict\nIf you want to keep the order of the items you insert into a dictionary, `OrderedDict` is the one you need.\n\n ```py\n>>> # regular unsorted dictionary\n>>> d = {'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2}\n\n>>> # dictionary sorted by key\n>>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))\nOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n\n>>> # dictionary sorted by value\n>>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n\n>>> # dictionary sorted by length of the key string\n>>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))\nOrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])\n```\n\n**OrderedDict.popitem(last=True)**\nThe popitem() method for ordered dictionaries returns and removes a (key, value) pair. The pairs are returned in LIFO order if last is true or FIFO order if false.\n(This method could be very useful in LRU cache design)\n\n### defaultdict\nThis datatype provides a factory function to store customized key-value pairs into dictionaries.\nFrom doc:\n\nIt is easy to group a sequence of key-value pairs into a dictionary of lists:\n```py\n>>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]\n>>> d = defaultdict(list)\n>>> for k, v in s:\n...     d[k].append(v)\n...\n>>> d.items()\n[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]\n```\n\nThis technique is simpler and faster than an equivalent technique using dict.setdefault():\n\n```py\n>>> d = {}\n>>> for k, v in s:\n...     d.setdefault(k, []).append(v)\n...\n>>> d.items()\n[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]\n```\n\n### heapq\n\n\n\n## Tricks\n(to be filled)\n\n### sorted()\n\n### enumerate()\n\nIt is an efficient way to loop through a list and get the index and value at the same time.\n\n```py\nenumerate(sequence, start=0) # start is optional, from 0 as default\n>>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n>>> list(enumerate(seasons))\n[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n>>> list(enumerate(seasons, start=1))\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n```\n\n### zip()\n\n### list comprehesion\n\nPython provides a very natural way to construct list, no matter what dimension.\n\n##### Basic syntax:\n\n```py\n[ expression for item in list if conditional ]\n```\n\nwhich is equivalent to\n\n```py\n\nfor item in list:\n    if conditional:\n        expression\n\n```\n\nso to initialize an empty 2D array in python is:\n```py\n\n# Creates a list containing 5 lists, each of 8 items, all set to 0\nw, h = 8, 5;\nMatrix = [[0 for x in range(w)] for y in range(h)]\n\n```\n\nbut note here, *append* does not work as expected in list comprehension, it only mutates array rather than returns value:\n```py\na = [[1,2],[3,4],[5,6]]\na = [x.append('a') for x in a]\n# return  [None,None,None]\n```\n\nanother example:\n<script src=\"https://gist.github.com/HanchengZhao/69e152c12509806653061c95c66d0ada.js\"></script>\n\nHere it returns the first node in a value list of a dictionary that has more than 1 node. `if node[1]` will cause `IndexError: list index out of range`, but `if node[1:]` works.\n\n### sort() and sorted()\nsort() sorts objects of list, it does not return list. So you can not use `''.join(list(str).sort())` to sort string. Instead, you can try `''.join(sorted(str))` because sorted will return a new sorted list from the items in iterable.","slug":"Python-Collections-And-Tricks","published":1,"updated":"2017-12-19T02:08:01.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfj2ljtf0009deu58em4krqu","content":"<blockquote>\n<p>Introduction of Python unique data structures of high performance and summary of pythonic ways of coding</p>\n</blockquote>\n<h2 id=\"python-collections\">Python collections</h2>\n<blockquote>\n<p>Here is <a href=\"https://docs.python.org/2.7/library/collections.html#collections.ChainMap\" target=\"_blank\" rel=\"external\">collection ducumentation</a></p>\n</blockquote>\n<p>Besides <code>list</code>, <code>dictionary</code>, <code>tuple</code>, python provides some high-performance container datatypes in the module <code>collections</code>, which I find extremely useful when dealing with hashtable or stack problems. You can always implement these by using basic <code>list</code> or <code>dictionary</code>, but it really eases your life if you know their existence and are familiar with their APIs beforehand.</p>\n<h3 id=\"deque-pronounced-deck-not-d-queue\">deque (pronounced “deck”, not “D-queue”)</h3>\n<p>Deque is basically a double-ended-queue structure and supports efficient operations like appends and pops from both sides. It has totally same operations as <code>list</code>, but runs in O(1) in operations like pop(0), appendleft(x).</p>\n<p><strong>To initialize</strong>: It takes a iterable and a maxlen. From official document:</p>\n<blockquote>\n<p>If maxlen is not specified or is None, deques may grow to an arbitrary length. Otherwise, the deque is bounded to the specified maximum length. Once a bounded length deque is full, when new items are added, a corresponding number of items are discarded from the opposite end.</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deque = collections.deque([],maxlen=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    deque.append(i)</span><br><span class=\"line\"><span class=\"keyword\">print</span> deque <span class=\"comment\"># deque([1, 2, 3], maxlen=3)</span></span><br></pre></td></tr></table></figure>\n<p><strong>List of methods from official document</strong>:</p>\n<ul>\n<li>\n<p>append(x): Add x to the right side of the deque.</p>\n</li>\n<li>\n<p>appendleft(x): Add x to the left side of the deque.</p>\n</li>\n<li>\n<p>clear():Remove all elements from the deque leaving it with length 0.</p>\n</li>\n<li>\n<p>count(x): Count the number of deque elements equal to x.</p>\n</li>\n<li>\n<p>extend(iterable): Extend the right side of the deque by appending elements from the iterable argument.</p>\n<ul>\n<li>if you extend a string, it will treat every char as an element</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    deque.append(i)</span><br><span class=\"line\">deque.extend(<span class=\"string\">\"[4,5,6]\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> deque <span class=\"comment\"># deque([0, 1, 2, 3, '[', '4', ',', '5', ',', '6', ']'])</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>extendleft(iterable):<br>\nExtend the left side of the deque by appending elements from iterable. Note, the series of left appends results in reversing the order of elements in the iterable argument.</p>\n</li>\n<li>\n<p>pop(): Remove and return an element from the right side of the deque. If no elements are present, raises an IndexError.</p>\n</li>\n<li>\n<p>popleft(): Remove and return an element from the left side of the deque. If no elements are present, raises an IndexError.</p>\n</li>\n<li>\n<p>remove(value): Removed the first occurrence of value. If not found, raises a ValueError.</p>\n</li>\n<li>\n<p>reverse(): Reverse the elements of the deque in-place and then return None.</p>\n</li>\n<li>\n<p>rotate(n): Rotate the deque n steps to the right. If n is negative, rotate to the left. Rotating one step to the right is equivalent to: d.appendleft(d.pop()).</p>\n</li>\n</ul>\n<h3 id=\"ordereddict\">OrderedDict</h3>\n<p>If you want to keep the order of the items you insert into a dictionary, <code>OrderedDict</code> is the one you need.</p>\n <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># regular unsorted dictionary</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'banana'</span>: <span class=\"number\">3</span>, <span class=\"string\">'apple'</span>: <span class=\"number\">4</span>, <span class=\"string\">'pear'</span>: <span class=\"number\">1</span>, <span class=\"string\">'orange'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># dictionary sorted by key</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>OrderedDict(sorted(d.items(), key=<span class=\"keyword\">lambda</span> t: t[<span class=\"number\">0</span>]))</span><br><span class=\"line\">OrderedDict([(<span class=\"string\">'apple'</span>, <span class=\"number\">4</span>), (<span class=\"string\">'banana'</span>, <span class=\"number\">3</span>), (<span class=\"string\">'orange'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'pear'</span>, <span class=\"number\">1</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># dictionary sorted by value</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>OrderedDict(sorted(d.items(), key=<span class=\"keyword\">lambda</span> t: t[<span class=\"number\">1</span>]))</span><br><span class=\"line\">OrderedDict([(<span class=\"string\">'pear'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'orange'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'banana'</span>, <span class=\"number\">3</span>), (<span class=\"string\">'apple'</span>, <span class=\"number\">4</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># dictionary sorted by length of the key string</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>OrderedDict(sorted(d.items(), key=<span class=\"keyword\">lambda</span> t: len(t[<span class=\"number\">0</span>])))</span><br><span class=\"line\">OrderedDict([(<span class=\"string\">'pear'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'apple'</span>, <span class=\"number\">4</span>), (<span class=\"string\">'orange'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'banana'</span>, <span class=\"number\">3</span>)])</span><br></pre></td></tr></table></figure>\n<p><strong>OrderedDict.popitem(last=True)</strong><br>\nThe popitem() method for ordered dictionaries returns and removes a (key, value) pair. The pairs are returned in LIFO order if last is true or FIFO order if false.<br>\n(This method could be very useful in LRU cache design)</p>\n<h3 id=\"defaultdict\">defaultdict</h3>\n<p>This datatype provides a factory function to store customized key-value pairs into dictionaries.<br>\nFrom doc:</p>\n<p>It is easy to group a sequence of key-value pairs into a dictionary of lists:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = [(<span class=\"string\">'yellow'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'blue'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'yellow'</span>, <span class=\"number\">3</span>), (<span class=\"string\">'blue'</span>, <span class=\"number\">4</span>), (<span class=\"string\">'red'</span>, <span class=\"number\">1</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = defaultdict(list)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> s:</span><br><span class=\"line\"><span class=\"meta\">... </span>    d[k].append(v)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.items()</span><br><span class=\"line\">[(<span class=\"string\">'blue'</span>, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]), (<span class=\"string\">'red'</span>, [<span class=\"number\">1</span>]), (<span class=\"string\">'yellow'</span>, [<span class=\"number\">1</span>, <span class=\"number\">3</span>])]</span><br></pre></td></tr></table></figure>\n<p>This technique is simpler and faster than an equivalent technique using dict.setdefault():</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> s:</span><br><span class=\"line\"><span class=\"meta\">... </span>    d.setdefault(k, []).append(v)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.items()</span><br><span class=\"line\">[(<span class=\"string\">'blue'</span>, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]), (<span class=\"string\">'red'</span>, [<span class=\"number\">1</span>]), (<span class=\"string\">'yellow'</span>, [<span class=\"number\">1</span>, <span class=\"number\">3</span>])]</span><br></pre></td></tr></table></figure>\n<h3 id=\"heapq\">heapq</h3>\n<h2 id=\"tricks\">Tricks</h2>\n<p>(to be filled)</p>\n<h3 id=\"sorted\">sorted()</h3>\n<h3 id=\"enumerate\">enumerate()</h3>\n<p>It is an efficient way to loop through a list and get the index and value at the same time.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enumerate(sequence, start=<span class=\"number\">0</span>) <span class=\"comment\"># start is optional, from 0 as default</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>seasons = [<span class=\"string\">'Spring'</span>, <span class=\"string\">'Summer'</span>, <span class=\"string\">'Fall'</span>, <span class=\"string\">'Winter'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(enumerate(seasons))</span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"string\">'Spring'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'Summer'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'Fall'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'Winter'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class=\"number\">1</span>))</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"string\">'Spring'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'Summer'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'Fall'</span>), (<span class=\"number\">4</span>, <span class=\"string\">'Winter'</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"zip\">zip()</h3>\n<h3 id=\"list-comprehesion\">list comprehesion</h3>\n<p>Python provides a very natural way to construct list, no matter what dimension.</p>\n<h5 id=\"basic-syntax\">Basic syntax:</h5>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ expression <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list <span class=\"keyword\">if</span> conditional ]</span><br></pre></td></tr></table></figure>\n<p>which is equivalent to</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> conditional:</span><br><span class=\"line\">        expression</span><br></pre></td></tr></table></figure>\n<p>so to initialize an empty 2D array in python is:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creates a list containing 5 lists, each of 8 items, all set to 0</span></span><br><span class=\"line\">w, h = <span class=\"number\">8</span>, <span class=\"number\">5</span>;</span><br><span class=\"line\">Matrix = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(w)] <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(h)]</span><br></pre></td></tr></table></figure>\n<p>but note here, <em>append</em> does not work as expected in list comprehension, it only mutates array rather than returns value:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]]</span><br><span class=\"line\">a = [x.append(<span class=\"string\">'a'</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a]</span><br><span class=\"line\"><span class=\"comment\"># return  [None,None,None]</span></span><br></pre></td></tr></table></figure>\n<p>another example:</p>\n<script src=\"https://gist.github.com/HanchengZhao/69e152c12509806653061c95c66d0ada.js\"></script>\n<p>Here it returns the first node in a value list of a dictionary that has more than 1 node. <code>if node[1]</code> will cause <code>IndexError: list index out of range</code>, but <code>if node[1:]</code> works.</p>\n<h3 id=\"sort-and-sorted\">sort() and sorted()</h3>\n<p>sort() sorts objects of list, it does not return list. So you can not use <code>''.join(list(str).sort())</code> to sort string. Instead, you can try <code>''.join(sorted(str))</code> because sorted will return a new sorted list from the items in iterable.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Introduction of Python unique data structures of high performance and summary of pythonic ways of coding</p>\n</blockquote>\n<h2 id=\"python-collections\">Python collections</h2>\n<blockquote>\n<p>Here is <a href=\"https://docs.python.org/2.7/library/collections.html#collections.ChainMap\" target=\"_blank\" rel=\"external\">collection ducumentation</a></p>\n</blockquote>\n<p>Besides <code>list</code>, <code>dictionary</code>, <code>tuple</code>, python provides some high-performance container datatypes in the module <code>collections</code>, which I find extremely useful when dealing with hashtable or stack problems. You can always implement these by using basic <code>list</code> or <code>dictionary</code>, but it really eases your life if you know their existence and are familiar with their APIs beforehand.</p>\n<h3 id=\"deque-pronounced-deck-not-d-queue\">deque (pronounced “deck”, not “D-queue”)</h3>\n<p>Deque is basically a double-ended-queue structure and supports efficient operations like appends and pops from both sides. It has totally same operations as <code>list</code>, but runs in O(1) in operations like pop(0), appendleft(x).</p>\n<p><strong>To initialize</strong>: It takes a iterable and a maxlen. From official document:</p>\n<blockquote>\n<p>If maxlen is not specified or is None, deques may grow to an arbitrary length. Otherwise, the deque is bounded to the specified maximum length. Once a bounded length deque is full, when new items are added, a corresponding number of items are discarded from the opposite end.</p>\n</blockquote>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deque = collections.deque([],maxlen=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    deque.append(i)</span><br><span class=\"line\"><span class=\"keyword\">print</span> deque <span class=\"comment\"># deque([1, 2, 3], maxlen=3)</span></span><br></pre></td></tr></table></figure>\n<p><strong>List of methods from official document</strong>:</p>\n<ul>\n<li>\n<p>append(x): Add x to the right side of the deque.</p>\n</li>\n<li>\n<p>appendleft(x): Add x to the left side of the deque.</p>\n</li>\n<li>\n<p>clear():Remove all elements from the deque leaving it with length 0.</p>\n</li>\n<li>\n<p>count(x): Count the number of deque elements equal to x.</p>\n</li>\n<li>\n<p>extend(iterable): Extend the right side of the deque by appending elements from the iterable argument.</p>\n<ul>\n<li>if you extend a string, it will treat every char as an element</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    deque.append(i)</span><br><span class=\"line\">deque.extend(<span class=\"string\">\"[4,5,6]\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> deque <span class=\"comment\"># deque([0, 1, 2, 3, '[', '4', ',', '5', ',', '6', ']'])</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>extendleft(iterable):<br>\nExtend the left side of the deque by appending elements from iterable. Note, the series of left appends results in reversing the order of elements in the iterable argument.</p>\n</li>\n<li>\n<p>pop(): Remove and return an element from the right side of the deque. If no elements are present, raises an IndexError.</p>\n</li>\n<li>\n<p>popleft(): Remove and return an element from the left side of the deque. If no elements are present, raises an IndexError.</p>\n</li>\n<li>\n<p>remove(value): Removed the first occurrence of value. If not found, raises a ValueError.</p>\n</li>\n<li>\n<p>reverse(): Reverse the elements of the deque in-place and then return None.</p>\n</li>\n<li>\n<p>rotate(n): Rotate the deque n steps to the right. If n is negative, rotate to the left. Rotating one step to the right is equivalent to: d.appendleft(d.pop()).</p>\n</li>\n</ul>\n<h3 id=\"ordered-dict\">OrderedDict</h3>\n<p>If you want to keep the order of the items you insert into a dictionary, <code>OrderedDict</code> is the one you need.</p>\n <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># regular unsorted dictionary</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'banana'</span>: <span class=\"number\">3</span>, <span class=\"string\">'apple'</span>: <span class=\"number\">4</span>, <span class=\"string\">'pear'</span>: <span class=\"number\">1</span>, <span class=\"string\">'orange'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># dictionary sorted by key</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>OrderedDict(sorted(d.items(), key=<span class=\"keyword\">lambda</span> t: t[<span class=\"number\">0</span>]))</span><br><span class=\"line\">OrderedDict([(<span class=\"string\">'apple'</span>, <span class=\"number\">4</span>), (<span class=\"string\">'banana'</span>, <span class=\"number\">3</span>), (<span class=\"string\">'orange'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'pear'</span>, <span class=\"number\">1</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># dictionary sorted by value</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>OrderedDict(sorted(d.items(), key=<span class=\"keyword\">lambda</span> t: t[<span class=\"number\">1</span>]))</span><br><span class=\"line\">OrderedDict([(<span class=\"string\">'pear'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'orange'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'banana'</span>, <span class=\"number\">3</span>), (<span class=\"string\">'apple'</span>, <span class=\"number\">4</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># dictionary sorted by length of the key string</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>OrderedDict(sorted(d.items(), key=<span class=\"keyword\">lambda</span> t: len(t[<span class=\"number\">0</span>])))</span><br><span class=\"line\">OrderedDict([(<span class=\"string\">'pear'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'apple'</span>, <span class=\"number\">4</span>), (<span class=\"string\">'orange'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'banana'</span>, <span class=\"number\">3</span>)])</span><br></pre></td></tr></table></figure>\n<p><strong>OrderedDict.popitem(last=True)</strong><br>\nThe popitem() method for ordered dictionaries returns and removes a (key, value) pair. The pairs are returned in LIFO order if last is true or FIFO order if false.<br>\n(This method could be very useful in LRU cache design)</p>\n<h3 id=\"defaultdict\">defaultdict</h3>\n<p>This datatype provides a factory function to store customized key-value pairs into dictionaries.<br>\nFrom doc:</p>\n<p>It is easy to group a sequence of key-value pairs into a dictionary of lists:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = [(<span class=\"string\">'yellow'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'blue'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'yellow'</span>, <span class=\"number\">3</span>), (<span class=\"string\">'blue'</span>, <span class=\"number\">4</span>), (<span class=\"string\">'red'</span>, <span class=\"number\">1</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = defaultdict(list)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> s:</span><br><span class=\"line\"><span class=\"meta\">... </span>    d[k].append(v)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.items()</span><br><span class=\"line\">[(<span class=\"string\">'blue'</span>, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]), (<span class=\"string\">'red'</span>, [<span class=\"number\">1</span>]), (<span class=\"string\">'yellow'</span>, [<span class=\"number\">1</span>, <span class=\"number\">3</span>])]</span><br></pre></td></tr></table></figure>\n<p>This technique is simpler and faster than an equivalent technique using dict.setdefault():</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> s:</span><br><span class=\"line\"><span class=\"meta\">... </span>    d.setdefault(k, []).append(v)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.items()</span><br><span class=\"line\">[(<span class=\"string\">'blue'</span>, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]), (<span class=\"string\">'red'</span>, [<span class=\"number\">1</span>]), (<span class=\"string\">'yellow'</span>, [<span class=\"number\">1</span>, <span class=\"number\">3</span>])]</span><br></pre></td></tr></table></figure>\n<h3 id=\"heapq\">heapq</h3>\n<h2 id=\"tricks\">Tricks</h2>\n<p>(to be filled)</p>\n<h3 id=\"sorted\">sorted()</h3>\n<h3 id=\"enumerate\">enumerate()</h3>\n<p>It is an efficient way to loop through a list and get the index and value at the same time.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enumerate(sequence, start=<span class=\"number\">0</span>) <span class=\"comment\"># start is optional, from 0 as default</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>seasons = [<span class=\"string\">'Spring'</span>, <span class=\"string\">'Summer'</span>, <span class=\"string\">'Fall'</span>, <span class=\"string\">'Winter'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(enumerate(seasons))</span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"string\">'Spring'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'Summer'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'Fall'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'Winter'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class=\"number\">1</span>))</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"string\">'Spring'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'Summer'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'Fall'</span>), (<span class=\"number\">4</span>, <span class=\"string\">'Winter'</span>)]</span><br></pre></td></tr></table></figure>\n<h3 id=\"zip\">zip()</h3>\n<h3 id=\"list-comprehesion\">list comprehesion</h3>\n<p>Python provides a very natural way to construct list, no matter what dimension.</p>\n<h5 id=\"basic-syntax\">Basic syntax:</h5>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ expression <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list <span class=\"keyword\">if</span> conditional ]</span><br></pre></td></tr></table></figure>\n<p>which is equivalent to</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> conditional:</span><br><span class=\"line\">        expression</span><br></pre></td></tr></table></figure>\n<p>so to initialize an empty 2D array in python is:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Creates a list containing 5 lists, each of 8 items, all set to 0</span></span><br><span class=\"line\">w, h = <span class=\"number\">8</span>, <span class=\"number\">5</span>;</span><br><span class=\"line\">Matrix = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(w)] <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(h)]</span><br></pre></td></tr></table></figure>\n<p>but note here, <em>append</em> does not work as expected in list comprehension, it only mutates array rather than returns value:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]]</span><br><span class=\"line\">a = [x.append(<span class=\"string\">'a'</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a]</span><br><span class=\"line\"><span class=\"comment\"># return  [None,None,None]</span></span><br></pre></td></tr></table></figure>\n<p>another example:</p>\n<script src=\"https://gist.github.com/HanchengZhao/69e152c12509806653061c95c66d0ada.js\"></script>\n<p>Here it returns the first node in a value list of a dictionary that has more than 1 node. <code>if node[1]</code> will cause <code>IndexError: list index out of range</code>, but <code>if node[1:]</code> works.</p>\n<h3 id=\"sort-and-sorted\">sort() and sorted()</h3>\n<p>sort() sorts objects of list, it does not return list. So you can not use <code>''.join(list(str).sort())</code> to sort string. Instead, you can try <code>''.join(sorted(str))</code> because sorted will return a new sorted list from the items in iterable.</p>\n"},{"title":"To my graduation","date":"2017-05-27T16:23:22.000Z","catalog":true,"header-img":"campus.JPG","catagories":["Thoughts"],"_content":">This is not the end, this is not even the beginning of the end, but perhaps it is the end of beginning.\n\n![Graduation](graduation.jpg)\n\nI tend to make a summary at major moments in my life. Convocation is at tonight and commencement is tomorrow, and this is it.\n\nIf I look back at myself 2 years ago, I would feel like looking at a different person in terms of things I am working on daily. I'm not saying I am so knowledgeable right now, I just knew nothing about programming at all. I still remember the first class I took in UD--I watched the professor ssh to a server, operate files using bash command and using Vim to edit codes fluently and I had no idea what it was. I learned a little bit C in my undergraduate, but I only knew you had to include a certain library to print \"hello world\". Our first assignment had to be submitted in tar file compressed using a command, I did not even know I had to cd into the file folder to do that, but actually, I did not know what tar file was. The course was mainly about high-performance computing and our final project was to parallelize radix sort on Cuda. It assumed that students knew basic algorithms and C programming, but I did not even know what radix sort was, let alone optimize it. To be honest, I did not know any other sorting algorithms until I took the algorithm class the second semester.\nBut after endless online tutorials and office hours, we finally turned in our report and got an A on that. Well, it is easy talking about the whole experience afterwards, but you know what you have been through.\n\nHowever, it was until the first winter session when Will took me to Andy's front-end class that I found this was what I was looking for. Nothing had been better than the instant response and sense of accomplishment you received when coding. Then I embarked on a wonderful journey of web development and for the first time, I realized I loved coding so much. Ever since then, the Mac room at the lower level of the library has been the place that I spent most of my spare time. Even now, I am typing these words here. Sometimes, I am the only one in the room, especially on Friday nights, and I enjoyed it. Certainly, I could and should go to more parties and make more friends, but I felt like that I didn't even have enough time for myself, I really could not afford time for someone I don't know. That being said, I did not feel lonely at all, I made a lot of incredible friends and had all kinds of brand new experience--like shooting guns, visiting countless museums and gazing at arts that I have only seen on books. Here is what I love here, you have a chance to do anything you love, of course legally, you do not have to worry about that you might miss something--it is always there, you only have to focus on the most important things right now and go for it whenever you like.\n\nI never regretted flying thousands of miles away from home and living in a completely new environment, cause I believed I would meet great people and I did. Nevertheless, I met some aimless people here, who claimed a goal but never fought for it. Most of the time, I was inspired by people surrounding me. In a data structure course I was auditing, the lecturer was a Ph.D. student in his 20s and an audience in the first row was a gray-haired gentleman perhaps in his 70s. It was just in harmony and no one doubted it.\n\n![Mac Room at library](mac_room.JPG)\n\nAnother person I respected the most was Andy Novocin. I considered him as my mentor though he was not technically my advisor. To a lot of people, being smart is an excuse for not being hard-working. Andy is never this type of person though he is one of the smartest guys I have ever seen. He got his doctor's degree at 24, but never stopped exploring and working. I feel like that the world would only be considered as fair when success only belongs to this type of person. Another thing I learned from him was that there is always a solution unless you don't want to find. Nowadays, there are really few problems you can not use Google to solve in daily life. I met a lot of people, who always asked others for help whenever encountering problems. I'm not saying this is a bad habit, especially after a long struggling, but at least, think about it, otherwise you'll never learn. When looking back at our life, we hardly remember the days when we laid on the sofa and watched TVs, but we had those struggling moments deep in memory. When those unsolved problems haunted us day and night, they became the most valuable recalls later in life.\n\n![Andy and I](andy.jpg)\n\n\n\nIf there is a lesson that I have learned in past 2 years, it must be--always keep an open mind to things you don't know before, you may love it in the end. People tend to judge emerging things based on their appearance, but when we take the time to think about what is behind, we will always explore something new and worthwhile.\n","source":"_posts/To-My-Graduation.markdown","raw":"---\ntitle:  \"To my graduation\"\ndate:   2017-5-27 12:23:22\ncatalog: true\nheader-img: \"campus.JPG\"\ntags: \n- Thoughts\ncatagories:\n- Thoughts\n---\n>This is not the end, this is not even the beginning of the end, but perhaps it is the end of beginning.\n\n![Graduation](graduation.jpg)\n\nI tend to make a summary at major moments in my life. Convocation is at tonight and commencement is tomorrow, and this is it.\n\nIf I look back at myself 2 years ago, I would feel like looking at a different person in terms of things I am working on daily. I'm not saying I am so knowledgeable right now, I just knew nothing about programming at all. I still remember the first class I took in UD--I watched the professor ssh to a server, operate files using bash command and using Vim to edit codes fluently and I had no idea what it was. I learned a little bit C in my undergraduate, but I only knew you had to include a certain library to print \"hello world\". Our first assignment had to be submitted in tar file compressed using a command, I did not even know I had to cd into the file folder to do that, but actually, I did not know what tar file was. The course was mainly about high-performance computing and our final project was to parallelize radix sort on Cuda. It assumed that students knew basic algorithms and C programming, but I did not even know what radix sort was, let alone optimize it. To be honest, I did not know any other sorting algorithms until I took the algorithm class the second semester.\nBut after endless online tutorials and office hours, we finally turned in our report and got an A on that. Well, it is easy talking about the whole experience afterwards, but you know what you have been through.\n\nHowever, it was until the first winter session when Will took me to Andy's front-end class that I found this was what I was looking for. Nothing had been better than the instant response and sense of accomplishment you received when coding. Then I embarked on a wonderful journey of web development and for the first time, I realized I loved coding so much. Ever since then, the Mac room at the lower level of the library has been the place that I spent most of my spare time. Even now, I am typing these words here. Sometimes, I am the only one in the room, especially on Friday nights, and I enjoyed it. Certainly, I could and should go to more parties and make more friends, but I felt like that I didn't even have enough time for myself, I really could not afford time for someone I don't know. That being said, I did not feel lonely at all, I made a lot of incredible friends and had all kinds of brand new experience--like shooting guns, visiting countless museums and gazing at arts that I have only seen on books. Here is what I love here, you have a chance to do anything you love, of course legally, you do not have to worry about that you might miss something--it is always there, you only have to focus on the most important things right now and go for it whenever you like.\n\nI never regretted flying thousands of miles away from home and living in a completely new environment, cause I believed I would meet great people and I did. Nevertheless, I met some aimless people here, who claimed a goal but never fought for it. Most of the time, I was inspired by people surrounding me. In a data structure course I was auditing, the lecturer was a Ph.D. student in his 20s and an audience in the first row was a gray-haired gentleman perhaps in his 70s. It was just in harmony and no one doubted it.\n\n![Mac Room at library](mac_room.JPG)\n\nAnother person I respected the most was Andy Novocin. I considered him as my mentor though he was not technically my advisor. To a lot of people, being smart is an excuse for not being hard-working. Andy is never this type of person though he is one of the smartest guys I have ever seen. He got his doctor's degree at 24, but never stopped exploring and working. I feel like that the world would only be considered as fair when success only belongs to this type of person. Another thing I learned from him was that there is always a solution unless you don't want to find. Nowadays, there are really few problems you can not use Google to solve in daily life. I met a lot of people, who always asked others for help whenever encountering problems. I'm not saying this is a bad habit, especially after a long struggling, but at least, think about it, otherwise you'll never learn. When looking back at our life, we hardly remember the days when we laid on the sofa and watched TVs, but we had those struggling moments deep in memory. When those unsolved problems haunted us day and night, they became the most valuable recalls later in life.\n\n![Andy and I](andy.jpg)\n\n\n\nIf there is a lesson that I have learned in past 2 years, it must be--always keep an open mind to things you don't know before, you may love it in the end. People tend to judge emerging things based on their appearance, but when we take the time to think about what is behind, we will always explore something new and worthwhile.\n","slug":"To-My-Graduation","published":1,"updated":"2017-12-19T01:50:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfj2ljtg000adeu5fcbywh87","content":"<blockquote>\n<p>This is not the end, this is not even the beginning of the end, but perhaps it is the end of beginning.</p>\n</blockquote>\n<p><img src=\"graduation.jpg\" alt=\"Graduation\"></p>\n<p>I tend to make a summary at major moments in my life. Convocation is at tonight and commencement is tomorrow, and this is it.</p>\n<p>If I look back at myself 2 years ago, I would feel like looking at a different person in terms of things I am working on daily. I’m not saying I am so knowledgeable right now, I just knew nothing about programming at all. I still remember the first class I took in UD–I watched the professor ssh to a server, operate files using bash command and using Vim to edit codes fluently and I had no idea what it was. I learned a little bit C in my undergraduate, but I only knew you had to include a certain library to print “hello world”. Our first assignment had to be submitted in tar file compressed using a command, I did not even know I had to cd into the file folder to do that, but actually, I did not know what tar file was. The course was mainly about high-performance computing and our final project was to parallelize radix sort on Cuda. It assumed that students knew basic algorithms and C programming, but I did not even know what radix sort was, let alone optimize it. To be honest, I did not know any other sorting algorithms until I took the algorithm class the second semester.<br>\nBut after endless online tutorials and office hours, we finally turned in our report and got an A on that. Well, it is easy talking about the whole experience afterwards, but you know what you have been through.</p>\n<p>However, it was until the first winter session when Will took me to Andy’s front-end class that I found this was what I was looking for. Nothing had been better than the instant response and sense of accomplishment you received when coding. Then I embarked on a wonderful journey of web development and for the first time, I realized I loved coding so much. Ever since then, the Mac room at the lower level of the library has been the place that I spent most of my spare time. Even now, I am typing these words here. Sometimes, I am the only one in the room, especially on Friday nights, and I enjoyed it. Certainly, I could and should go to more parties and make more friends, but I felt like that I didn’t even have enough time for myself, I really could not afford time for someone I don’t know. That being said, I did not feel lonely at all, I made a lot of incredible friends and had all kinds of brand new experience–like shooting guns, visiting countless museums and gazing at arts that I have only seen on books. Here is what I love here, you have a chance to do anything you love, of course legally, you do not have to worry about that you might miss something–it is always there, you only have to focus on the most important things right now and go for it whenever you like.</p>\n<p>I never regretted flying thousands of miles away from home and living in a completely new environment, cause I believed I would meet great people and I did. Nevertheless, I met some aimless people here, who claimed a goal but never fought for it. Most of the time, I was inspired by people surrounding me. In a data structure course I was auditing, the lecturer was a Ph.D. student in his 20s and an audience in the first row was a gray-haired gentleman perhaps in his 70s. It was just in harmony and no one doubted it.</p>\n<p><img src=\"mac_room.JPG\" alt=\"Mac Room at library\"></p>\n<p>Another person I respected the most was Andy Novocin. I considered him as my mentor though he was not technically my advisor. To a lot of people, being smart is an excuse for not being hard-working. Andy is never this type of person though he is one of the smartest guys I have ever seen. He got his doctor’s degree at 24, but never stopped exploring and working. I feel like that the world would only be considered as fair when success only belongs to this type of person. Another thing I learned from him was that there is always a solution unless you don’t want to find. Nowadays, there are really few problems you can not use Google to solve in daily life. I met a lot of people, who always asked others for help whenever encountering problems. I’m not saying this is a bad habit, especially after a long struggling, but at least, think about it, otherwise you’ll never learn. When looking back at our life, we hardly remember the days when we laid on the sofa and watched TVs, but we had those struggling moments deep in memory. When those unsolved problems haunted us day and night, they became the most valuable recalls later in life.</p>\n<p><img src=\"andy.jpg\" alt=\"Andy and I\"></p>\n<p>If there is a lesson that I have learned in past 2 years, it must be–always keep an open mind to things you don’t know before, you may love it in the end. People tend to judge emerging things based on their appearance, but when we take the time to think about what is behind, we will always explore something new and worthwhile.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This is not the end, this is not even the beginning of the end, but perhaps it is the end of beginning.</p>\n</blockquote>\n<p><img src=\"graduation.jpg\" alt=\"Graduation\"></p>\n<p>I tend to make a summary at major moments in my life. Convocation is at tonight and commencement is tomorrow, and this is it.</p>\n<p>If I look back at myself 2 years ago, I would feel like looking at a different person in terms of things I am working on daily. I’m not saying I am so knowledgeable right now, I just knew nothing about programming at all. I still remember the first class I took in UD–I watched the professor ssh to a server, operate files using bash command and using Vim to edit codes fluently and I had no idea what it was. I learned a little bit C in my undergraduate, but I only knew you had to include a certain library to print “hello world”. Our first assignment had to be submitted in tar file compressed using a command, I did not even know I had to cd into the file folder to do that, but actually, I did not know what tar file was. The course was mainly about high-performance computing and our final project was to parallelize radix sort on Cuda. It assumed that students knew basic algorithms and C programming, but I did not even know what radix sort was, let alone optimize it. To be honest, I did not know any other sorting algorithms until I took the algorithm class the second semester.<br>\nBut after endless online tutorials and office hours, we finally turned in our report and got an A on that. Well, it is easy talking about the whole experience afterwards, but you know what you have been through.</p>\n<p>However, it was until the first winter session when Will took me to Andy’s front-end class that I found this was what I was looking for. Nothing had been better than the instant response and sense of accomplishment you received when coding. Then I embarked on a wonderful journey of web development and for the first time, I realized I loved coding so much. Ever since then, the Mac room at the lower level of the library has been the place that I spent most of my spare time. Even now, I am typing these words here. Sometimes, I am the only one in the room, especially on Friday nights, and I enjoyed it. Certainly, I could and should go to more parties and make more friends, but I felt like that I didn’t even have enough time for myself, I really could not afford time for someone I don’t know. That being said, I did not feel lonely at all, I made a lot of incredible friends and had all kinds of brand new experience–like shooting guns, visiting countless museums and gazing at arts that I have only seen on books. Here is what I love here, you have a chance to do anything you love, of course legally, you do not have to worry about that you might miss something–it is always there, you only have to focus on the most important things right now and go for it whenever you like.</p>\n<p>I never regretted flying thousands of miles away from home and living in a completely new environment, cause I believed I would meet great people and I did. Nevertheless, I met some aimless people here, who claimed a goal but never fought for it. Most of the time, I was inspired by people surrounding me. In a data structure course I was auditing, the lecturer was a Ph.D. student in his 20s and an audience in the first row was a gray-haired gentleman perhaps in his 70s. It was just in harmony and no one doubted it.</p>\n<p><img src=\"mac_room.JPG\" alt=\"Mac Room at library\"></p>\n<p>Another person I respected the most was Andy Novocin. I considered him as my mentor though he was not technically my advisor. To a lot of people, being smart is an excuse for not being hard-working. Andy is never this type of person though he is one of the smartest guys I have ever seen. He got his doctor’s degree at 24, but never stopped exploring and working. I feel like that the world would only be considered as fair when success only belongs to this type of person. Another thing I learned from him was that there is always a solution unless you don’t want to find. Nowadays, there are really few problems you can not use Google to solve in daily life. I met a lot of people, who always asked others for help whenever encountering problems. I’m not saying this is a bad habit, especially after a long struggling, but at least, think about it, otherwise you’ll never learn. When looking back at our life, we hardly remember the days when we laid on the sofa and watched TVs, but we had those struggling moments deep in memory. When those unsolved problems haunted us day and night, they became the most valuable recalls later in life.</p>\n<p><img src=\"andy.jpg\" alt=\"Andy and I\"></p>\n<p>If there is a lesson that I have learned in past 2 years, it must be–always keep an open mind to things you don’t know before, you may love it in the end. People tend to judge emerging things based on their appearance, but when we take the time to think about what is behind, we will always explore something new and worthwhile.</p>\n"},{"title":"Deploy a react app in kubernetes","catalog":true,"date":"2018-01-13T15:05:28.000Z","subtitle":null,"header-img":"tree.jpg","_content":"\n## Task: Deploy a react app in kubernetes \n> make sure cli tools such as node, docker, kubectl are installed\n\n## Steps:\n1. Use [create-react-app](https://github.com/facebookincubator/create-react-app) tool to generate a new project\n    - `create-react-app new-app`\n    - `cd new-app`\n2. Configure a [Dockerfile](https://docs.docker.com/engine/reference/builder/) for the react app\n    - use [alpine-node](https://github.com/mhart/alpine-node) as base docker image(Minimal Node.js Docker Images)\n        ```docker\n        # example\n        # create a production build\n        FROM mhart/alpine-node AS build\n        WORKDIR /app\n        COPY . .\n        RUN npm run build\n        \n        #serve the built app\n        FROM mhart/alpine-node\n        RUN npm install -g serve\n        WORKDIR /app\n        COPY --from=build /app/build .\n        CMD [ \"serve\", \"-p 80\", \"-s\", \".\"]\n        ```\n    - build the image: `docker build -t $repo-name .`\n    - run it with `docker run -p 8080:80 $repo-name`, go to `localhost:8080`\n3. Deploy your app to kubenetes cluster\n    - push your local image to a remote repo: `$ docker push $DOCKER_ID_USER/repo:tag` to docker hub \n    - create a new deployment: `kubectl run $deployment-name --image=$image-location --port=80`\n    - expose your service through NodePort: `kubectl expose deployment/$deployment-name --type=\"NodePort\" --port 80`\n    - get the node $name: `kubectl get node`\n    - get the service external $port: `kubectl describe services/$service-name`\n    - check the app out in the brower: `$nodename:$port`\n\n## References \n\n- [Running React app inside a Docker container](https://hackernoon.com/running-react-app-inside-a-docker-container-27136a75916b)\n- [Building and Deploying a Containerised React App and Microservice Using the Same OpenAPI Contract](http://connect.cd/2017/11/building-and-deploying-a-containerised-react-app-and-microservice-using-the-same-openapi-contract/)\n","source":"_posts/deploy-a-react-app-in-kubernetes.md","raw":"---\ntitle: Deploy a react app in kubernetes\ncatalog: true\ndate: 2018-01-13 10:05:28\nsubtitle:\nheader-img: \"tree.jpg\"\ntags:\n- Kubernetes\n- Reactjs\n- Cloud\n- Docker\n---\n\n## Task: Deploy a react app in kubernetes \n> make sure cli tools such as node, docker, kubectl are installed\n\n## Steps:\n1. Use [create-react-app](https://github.com/facebookincubator/create-react-app) tool to generate a new project\n    - `create-react-app new-app`\n    - `cd new-app`\n2. Configure a [Dockerfile](https://docs.docker.com/engine/reference/builder/) for the react app\n    - use [alpine-node](https://github.com/mhart/alpine-node) as base docker image(Minimal Node.js Docker Images)\n        ```docker\n        # example\n        # create a production build\n        FROM mhart/alpine-node AS build\n        WORKDIR /app\n        COPY . .\n        RUN npm run build\n        \n        #serve the built app\n        FROM mhart/alpine-node\n        RUN npm install -g serve\n        WORKDIR /app\n        COPY --from=build /app/build .\n        CMD [ \"serve\", \"-p 80\", \"-s\", \".\"]\n        ```\n    - build the image: `docker build -t $repo-name .`\n    - run it with `docker run -p 8080:80 $repo-name`, go to `localhost:8080`\n3. Deploy your app to kubenetes cluster\n    - push your local image to a remote repo: `$ docker push $DOCKER_ID_USER/repo:tag` to docker hub \n    - create a new deployment: `kubectl run $deployment-name --image=$image-location --port=80`\n    - expose your service through NodePort: `kubectl expose deployment/$deployment-name --type=\"NodePort\" --port 80`\n    - get the node $name: `kubectl get node`\n    - get the service external $port: `kubectl describe services/$service-name`\n    - check the app out in the brower: `$nodename:$port`\n\n## References \n\n- [Running React app inside a Docker container](https://hackernoon.com/running-react-app-inside-a-docker-container-27136a75916b)\n- [Building and Deploying a Containerised React App and Microservice Using the Same OpenAPI Contract](http://connect.cd/2017/11/building-and-deploying-a-containerised-react-app-and-microservice-using-the-same-openapi-contract/)\n","slug":"deploy-a-react-app-in-kubernetes","published":1,"updated":"2018-01-13T15:14:29.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfj2ljtj000cdeu5yqahzabq","content":"<h2 id=\"task-deploy-a-react-app-in-kubernetes\">Task: Deploy a react app in kubernetes</h2>\n<blockquote>\n<p>make sure cli tools such as node, docker, kubectl are installed</p>\n</blockquote>\n<h2 id=\"steps\">Steps:</h2>\n<ol>\n<li>Use <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"external\">create-react-app</a> tool to generate a new project\n<ul>\n<li><code>create-react-app new-app</code></li>\n<li><code>cd new-app</code></li>\n</ul>\n</li>\n<li>Configure a <a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"external\">Dockerfile</a> for the react app\n<ul>\n<li>\n<p>use <a href=\"https://github.com/mhart/alpine-node\" target=\"_blank\" rel=\"external\">alpine-node</a> as base docker image(Minimal Node.js Docker Images)</p>\n  <figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># example</span></span><br><span class=\"line\"><span class=\"comment\"># create a production build</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mhart/alpine-node AS build</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm run build</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\">#serve the built app</span></span></span><br><span class=\"line\"><span class=\"bash\">FROM mhart/alpine-node</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm install -g serve</span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /app</span></span><br><span class=\"line\"><span class=\"bash\">COPY --from=build /app/build .</span></span><br><span class=\"line\"><span class=\"bash\">CMD [ <span class=\"string\">\"serve\"</span>, <span class=\"string\">\"-p 80\"</span>, <span class=\"string\">\"-s\"</span>, <span class=\"string\">\".\"</span>]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>build the image: <code>docker build -t $repo-name .</code></p>\n</li>\n<li>\n<p>run it with <code>docker run -p 8080:80 $repo-name</code>, go to <code>localhost:8080</code></p>\n</li>\n</ul>\n</li>\n<li>Deploy your app to kubenetes cluster\n<ul>\n<li>push your local image to a remote repo: <code>$ docker push $DOCKER_ID_USER/repo:tag</code> to docker hub</li>\n<li>create a new deployment: <code>kubectl run $deployment-name --image=$image-location --port=80</code></li>\n<li>expose your service through NodePort: <code>kubectl expose deployment/$deployment-name --type=&quot;NodePort&quot; --port 80</code></li>\n<li>get the node $name: <code>kubectl get node</code></li>\n<li>get the service external $port: <code>kubectl describe services/$service-name</code></li>\n<li>check the app out in the brower: <code>$nodename:$port</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://hackernoon.com/running-react-app-inside-a-docker-container-27136a75916b\" target=\"_blank\" rel=\"external\">Running React app inside a Docker container</a></li>\n<li><a href=\"http://connect.cd/2017/11/building-and-deploying-a-containerised-react-app-and-microservice-using-the-same-openapi-contract/\" target=\"_blank\" rel=\"external\">Building and Deploying a Containerised React App and Microservice Using the Same OpenAPI Contract</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"task-deploy-a-react-app-in-kubernetes\">Task: Deploy a react app in kubernetes</h2>\n<blockquote>\n<p>make sure cli tools such as node, docker, kubectl are installed</p>\n</blockquote>\n<h2 id=\"steps\">Steps:</h2>\n<ol>\n<li>Use <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"external\">create-react-app</a> tool to generate a new project\n<ul>\n<li><code>create-react-app new-app</code></li>\n<li><code>cd new-app</code></li>\n</ul>\n</li>\n<li>Configure a <a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"external\">Dockerfile</a> for the react app\n<ul>\n<li>\n<p>use <a href=\"https://github.com/mhart/alpine-node\" target=\"_blank\" rel=\"external\">alpine-node</a> as base docker image(Minimal Node.js Docker Images)</p>\n  <figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># example</span></span><br><span class=\"line\"><span class=\"comment\"># create a production build</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mhart/alpine-node AS build</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm run build</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\">#serve the built app</span></span></span><br><span class=\"line\"><span class=\"bash\">FROM mhart/alpine-node</span></span><br><span class=\"line\"><span class=\"bash\">RUN npm install -g serve</span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /app</span></span><br><span class=\"line\"><span class=\"bash\">COPY --from=build /app/build .</span></span><br><span class=\"line\"><span class=\"bash\">CMD [ <span class=\"string\">\"serve\"</span>, <span class=\"string\">\"-p 80\"</span>, <span class=\"string\">\"-s\"</span>, <span class=\"string\">\".\"</span>]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>build the image: <code>docker build -t $repo-name .</code></p>\n</li>\n<li>\n<p>run it with <code>docker run -p 8080:80 $repo-name</code>, go to <code>localhost:8080</code></p>\n</li>\n</ul>\n</li>\n<li>Deploy your app to kubenetes cluster\n<ul>\n<li>push your local image to a remote repo: <code>$ docker push $DOCKER_ID_USER/repo:tag</code> to docker hub</li>\n<li>create a new deployment: <code>kubectl run $deployment-name --image=$image-location --port=80</code></li>\n<li>expose your service through NodePort: <code>kubectl expose deployment/$deployment-name --type=&quot;NodePort&quot; --port 80</code></li>\n<li>get the node $name: <code>kubectl get node</code></li>\n<li>get the service external $port: <code>kubectl describe services/$service-name</code></li>\n<li>check the app out in the brower: <code>$nodename:$port</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://hackernoon.com/running-react-app-inside-a-docker-container-27136a75916b\" target=\"_blank\" rel=\"external\">Running React app inside a Docker container</a></li>\n<li><a href=\"http://connect.cd/2017/11/building-and-deploying-a-containerised-react-app-and-microservice-using-the-same-openapi-contract/\" target=\"_blank\" rel=\"external\">Building and Deploying a Containerised React App and Microservice Using the Same OpenAPI Contract</a></li>\n</ul>\n"},{"title":"React global state management","catalog":true,"date":"2018-03-09T04:51:10.000Z","subtitle":null,"header-img":"sunset.JPG","_content":"\nRedux and Mobx are two most popular state management tools for React apps, representing different design philosophis as object-oriented programming and functional programming. Recently, a new context api has been proposed to provide a native global store solution and received a lot of discussions. Here's a brief comparion of different methods. I have to say before hand, most things in software engineering are based on opinions and tradeoffs, not facts or hard truth. \n\n\n## Redux\n\nBasic data flow:\n\n```mermaid\ngraph LR\nA[Action]-->|just payload|B(Reducer)\nD[prevState] --> B\nB -->|new state| C(Store)\nC -->|rerender| E(subscribed views)\n```\n\n\n### Action\n\nActions are just plain object that contains `type` and `payload` property, such as \n```\n{\n    type: ADD_TODO,\n    payload: text\n}\n```\nActions should be returned by action creaters.\n\n### Reducer\n\nReducers are just pure functions that take the previous `related` state and action, then return the new state\n\nReducers can be combined together by using a function `combineReducers` from `redux`\n\n### Store\n\nSingle source of truth. Store should be created at the root level,\n```js\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport reducer from './reducers'\n...\nconst store = createStore(reducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n### APIs\n\n- [createStore](https://redux.js.org/api-reference/createstore)\n    - create the single store at root level \n- [Store](https://redux.js.org/api-reference/store)\n- [combineReducers](https://redux.js.org/api-reference/combinereducers)\n- [applyMiddleware](https://note.youdao.com/)\n    - useful for async ajax requests   \n- [bindActionCreators](https://note.youdao.com/)\n    - the only use case for this is when you want to pass some action creators down to a component that isn't aware of Redux\n- [compose](https://note.youdao.com/)\n    - composes functions from right to left\n### react-redux\n\n#### <Provider store>\nMakes the Redux store available to the connect() calls in the component hierarchy below. \n\n#### connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\nConnects a React component to a Redux store. \n\n`\nconnect(\n  mapStateToProps,\n  mapDispatchToProps\n)(component)`\n\nIf no parameters are provided, it injects just dispatch and doesn't listen to store\n\n**params:**\n- mapStateToProps(state, [ownProps]): stateProps\n\n- mapDispatchToProps(dispatch, [ownProps]): dispatchProps\n\n### related libraries\n\n- [redux-thunk](https://github.com/gaearon/redux-thunk)\n    - Redux Thunk middleware allows you to write action creators that return a function instead of an action.  \n    - The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. Thus it's very useful for async actions and promises.\n\n- [redux-saga](https://github.com/redux-saga/redux-saga)\n    - a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, simple to test, and better at handling failures.\n\n### Feature\n- reacting to actions or events\n- single store\n- functional programming paradigm\n- immutable\n- pure\n- explicit update logic\n- plain JavaScript\n- more boilerplate\n- normalized state\n- flat state\n- examples:\n    - business apps\n    - event based systems\n    - game events involving a complex reaction\n\n### redux todolist example:\n[![Edit todos](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/1zo57njq9q)\n\n### Summary\n\nRedux is an opinionated library that reinforces immutable data and functional programming pattern. It provides more granular control of data flow and shines in testability, scaleability, maintainability. It will be suitable for a large team and complex apps because it has mature best practices and community support.\n\n\n## MobX\nData flow:\n![dataflow](https://mobx.js.org/docs/flow.png)\n\n### observable\nObservable values can be JS primitives, references, plain objects, class instances, arrays and maps.\n\nUsage:\n- observable(value)\n- @observable classProperty = value\n\n### computed && autorun\n\nThey are both reactively invoked expressions, but use @computed if you want to reactively produce a value that can be used by other observers and autorun if you don't want to produce a new value but rather want to achieve an effect. For example imperative side effects like logging, making network requests etc.\n\nexample:\n```\nimport {observable, computed} from \"mobx\";\n\nclass OrderLine {\n    @observable price = 0;\n    @observable amount = 1;\n\n    constructor(price) {\n        this.price = price;\n    }\n\n    @computed get total() {\n        return this.price * this.amount;\n    }\n}\n```\n\n### (@)observer\n\nThe react components that are wrapped by observer will react to the change of observables.\n\n### action\n\nIt has similar concepts as action in redux. Simply call `mobx.useStrict(true)` when your application is initialized, and MobX will throw anytime you (accidentally) try to modify state without using an action.\n\n### Feature\n\n- Reacting to state changes\n- multiple stores\n- object-oriented programming and reactive programming paradigms\n- mutable\n- impure\n- implicit update logic\n- “magic” JavaScript\n- less boilerplate\n- denormalized state\n- nested state\n- Examples\n    - Real-time systems, dashboards, etc\n    - Text editors, presentation software, etc.\n    - Not for event based\n\n### mobx todo example:\n[![Edit Simple MobX TodoList](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/vnw0yzx555)\n\n### Summary\nMobx is more suitable for simpler application, rapid prototyping and a small team. It has short learning curve for those that are already familiar with object-oriented programming. It can also be used in large projects if explicit constraints are added, such as useStrict.\n\n\n## new context api\nThe new context api tries to provide a native global store for React apps and solves the problems that old context api has: [shouldComponentUpdate blocks context changes](https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#shouldcomponentupdate-blocks-context-changes) and [Shifts complexity to user space](https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#shifts-complexity-to-user-space)\n\nContext in React provides a mechanism for a child component to access a value in an ancestor component.\n\n### React.createContext()\nIt is passed the initial value (and optionally a [fancy opt-out function that uses a bitmask](https://twitter.com/acdlite/status/957446433656864768)). This returns an object with a \"provider\" and a \"consumer\"\n### Provider\n\nThe provider acts as an event emitter. It keeps track of the most recent context value, and a list of subscribers to be notified whenever it changes.\n\n### Consumer\n\nThe consumer accesses the provider's event emitter using the context API. (This usage is fine because the event emitter itself does not change). When the provider emits a change event, the consumer is notified and calls setState on itself to schedule a re-render.\n\nExample:\n```\nconst ThemeContext = React.createContext('light')\nclass ThemeProvider extends React.Component {\n  state = {theme: 'light'}\n  render() {\n    return ThemeContext.provide(this.state.theme, this.props.children)\n  }\n}\n\nconst ThemeConsumer = ({children}) => ThemeContext.consume(children)\n\nclass App extends React.Component {\n  render() {\n    <ThemeProvider>\n      <ThemeConsumer>{val => <div>{val}</div>}</ThemeConsumer>\n    </ThemeProvider>\n  }\n}\n```\n\n[![Edit Example of React's new context API](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/k71q68nzr)\n\n### Summary\n\nNew context api provides a native way to manage global store in react apps and is perfect for dependency injection (theme, intl, buildConfig), but it lacks the power to control the data flow. Redux or Mobx may still be needed to handle complex async data process.\n\n\n## Resource\n\n[Redux Doc](https://redux.js.org/)\n\n[Mobx Doc](https://mobx.js.org/index.html)\n\n[Preethi Kasireddy - MobX vs Redux: Comparing the Opposing Paradigms](https://www.youtube.com/watch?v=76FRrbY18Bs)\n\n[Redux or MobX: An attempt to dissolve the Confusion](https://www.robinwieruch.de/redux-mobx-confusion/)\n\n[Replacing redux with the new React context API](https://medium.com/@DidierFranc/replacing-redux-with-the-new-react-context-api-8f5d01a00e8c)\n\n[new version of context](https://github.com/acdlite/rfcs/blob/new-version-of-context/text/0000-new-version-of-context.md)","source":"_posts/react-global-state-management.md","raw":"---\ntitle: React global state management\ncatalog: true\ndate: 2018-03-08 23:51:10\nsubtitle:\nheader-img: \"sunset.JPG\"\ntags:\n- React\n- Redux\n- Mobx\n---\n\nRedux and Mobx are two most popular state management tools for React apps, representing different design philosophis as object-oriented programming and functional programming. Recently, a new context api has been proposed to provide a native global store solution and received a lot of discussions. Here's a brief comparion of different methods. I have to say before hand, most things in software engineering are based on opinions and tradeoffs, not facts or hard truth. \n\n\n## Redux\n\nBasic data flow:\n\n```mermaid\ngraph LR\nA[Action]-->|just payload|B(Reducer)\nD[prevState] --> B\nB -->|new state| C(Store)\nC -->|rerender| E(subscribed views)\n```\n\n\n### Action\n\nActions are just plain object that contains `type` and `payload` property, such as \n```\n{\n    type: ADD_TODO,\n    payload: text\n}\n```\nActions should be returned by action creaters.\n\n### Reducer\n\nReducers are just pure functions that take the previous `related` state and action, then return the new state\n\nReducers can be combined together by using a function `combineReducers` from `redux`\n\n### Store\n\nSingle source of truth. Store should be created at the root level,\n```js\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport reducer from './reducers'\n...\nconst store = createStore(reducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n### APIs\n\n- [createStore](https://redux.js.org/api-reference/createstore)\n    - create the single store at root level \n- [Store](https://redux.js.org/api-reference/store)\n- [combineReducers](https://redux.js.org/api-reference/combinereducers)\n- [applyMiddleware](https://note.youdao.com/)\n    - useful for async ajax requests   \n- [bindActionCreators](https://note.youdao.com/)\n    - the only use case for this is when you want to pass some action creators down to a component that isn't aware of Redux\n- [compose](https://note.youdao.com/)\n    - composes functions from right to left\n### react-redux\n\n#### <Provider store>\nMakes the Redux store available to the connect() calls in the component hierarchy below. \n\n#### connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\nConnects a React component to a Redux store. \n\n`\nconnect(\n  mapStateToProps,\n  mapDispatchToProps\n)(component)`\n\nIf no parameters are provided, it injects just dispatch and doesn't listen to store\n\n**params:**\n- mapStateToProps(state, [ownProps]): stateProps\n\n- mapDispatchToProps(dispatch, [ownProps]): dispatchProps\n\n### related libraries\n\n- [redux-thunk](https://github.com/gaearon/redux-thunk)\n    - Redux Thunk middleware allows you to write action creators that return a function instead of an action.  \n    - The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. Thus it's very useful for async actions and promises.\n\n- [redux-saga](https://github.com/redux-saga/redux-saga)\n    - a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, simple to test, and better at handling failures.\n\n### Feature\n- reacting to actions or events\n- single store\n- functional programming paradigm\n- immutable\n- pure\n- explicit update logic\n- plain JavaScript\n- more boilerplate\n- normalized state\n- flat state\n- examples:\n    - business apps\n    - event based systems\n    - game events involving a complex reaction\n\n### redux todolist example:\n[![Edit todos](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/1zo57njq9q)\n\n### Summary\n\nRedux is an opinionated library that reinforces immutable data and functional programming pattern. It provides more granular control of data flow and shines in testability, scaleability, maintainability. It will be suitable for a large team and complex apps because it has mature best practices and community support.\n\n\n## MobX\nData flow:\n![dataflow](https://mobx.js.org/docs/flow.png)\n\n### observable\nObservable values can be JS primitives, references, plain objects, class instances, arrays and maps.\n\nUsage:\n- observable(value)\n- @observable classProperty = value\n\n### computed && autorun\n\nThey are both reactively invoked expressions, but use @computed if you want to reactively produce a value that can be used by other observers and autorun if you don't want to produce a new value but rather want to achieve an effect. For example imperative side effects like logging, making network requests etc.\n\nexample:\n```\nimport {observable, computed} from \"mobx\";\n\nclass OrderLine {\n    @observable price = 0;\n    @observable amount = 1;\n\n    constructor(price) {\n        this.price = price;\n    }\n\n    @computed get total() {\n        return this.price * this.amount;\n    }\n}\n```\n\n### (@)observer\n\nThe react components that are wrapped by observer will react to the change of observables.\n\n### action\n\nIt has similar concepts as action in redux. Simply call `mobx.useStrict(true)` when your application is initialized, and MobX will throw anytime you (accidentally) try to modify state without using an action.\n\n### Feature\n\n- Reacting to state changes\n- multiple stores\n- object-oriented programming and reactive programming paradigms\n- mutable\n- impure\n- implicit update logic\n- “magic” JavaScript\n- less boilerplate\n- denormalized state\n- nested state\n- Examples\n    - Real-time systems, dashboards, etc\n    - Text editors, presentation software, etc.\n    - Not for event based\n\n### mobx todo example:\n[![Edit Simple MobX TodoList](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/vnw0yzx555)\n\n### Summary\nMobx is more suitable for simpler application, rapid prototyping and a small team. It has short learning curve for those that are already familiar with object-oriented programming. It can also be used in large projects if explicit constraints are added, such as useStrict.\n\n\n## new context api\nThe new context api tries to provide a native global store for React apps and solves the problems that old context api has: [shouldComponentUpdate blocks context changes](https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#shouldcomponentupdate-blocks-context-changes) and [Shifts complexity to user space](https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#shifts-complexity-to-user-space)\n\nContext in React provides a mechanism for a child component to access a value in an ancestor component.\n\n### React.createContext()\nIt is passed the initial value (and optionally a [fancy opt-out function that uses a bitmask](https://twitter.com/acdlite/status/957446433656864768)). This returns an object with a \"provider\" and a \"consumer\"\n### Provider\n\nThe provider acts as an event emitter. It keeps track of the most recent context value, and a list of subscribers to be notified whenever it changes.\n\n### Consumer\n\nThe consumer accesses the provider's event emitter using the context API. (This usage is fine because the event emitter itself does not change). When the provider emits a change event, the consumer is notified and calls setState on itself to schedule a re-render.\n\nExample:\n```\nconst ThemeContext = React.createContext('light')\nclass ThemeProvider extends React.Component {\n  state = {theme: 'light'}\n  render() {\n    return ThemeContext.provide(this.state.theme, this.props.children)\n  }\n}\n\nconst ThemeConsumer = ({children}) => ThemeContext.consume(children)\n\nclass App extends React.Component {\n  render() {\n    <ThemeProvider>\n      <ThemeConsumer>{val => <div>{val}</div>}</ThemeConsumer>\n    </ThemeProvider>\n  }\n}\n```\n\n[![Edit Example of React's new context API](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/k71q68nzr)\n\n### Summary\n\nNew context api provides a native way to manage global store in react apps and is perfect for dependency injection (theme, intl, buildConfig), but it lacks the power to control the data flow. Redux or Mobx may still be needed to handle complex async data process.\n\n\n## Resource\n\n[Redux Doc](https://redux.js.org/)\n\n[Mobx Doc](https://mobx.js.org/index.html)\n\n[Preethi Kasireddy - MobX vs Redux: Comparing the Opposing Paradigms](https://www.youtube.com/watch?v=76FRrbY18Bs)\n\n[Redux or MobX: An attempt to dissolve the Confusion](https://www.robinwieruch.de/redux-mobx-confusion/)\n\n[Replacing redux with the new React context API](https://medium.com/@DidierFranc/replacing-redux-with-the-new-react-context-api-8f5d01a00e8c)\n\n[new version of context](https://github.com/acdlite/rfcs/blob/new-version-of-context/text/0000-new-version-of-context.md)","slug":"react-global-state-management","published":1,"updated":"2018-03-09T05:09:32.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfj2ljtk000ddeu55vbel6xe","content":"<p>Redux and Mobx are two most popular state management tools for React apps, representing different design philosophis as object-oriented programming and functional programming. Recently, a new context api has been proposed to provide a native global store solution and received a lot of discussions. Here’s a brief comparion of different methods. I have to say before hand, most things in software engineering are based on opinions and tradeoffs, not facts or hard truth.</p>\n<h2 id=\"redux\">Redux</h2>\n<p>Basic data flow:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A[Action]--&gt;|just payload|B(Reducer)</span><br><span class=\"line\">D[prevState] --&gt; B</span><br><span class=\"line\">B --&gt;|new state| C(Store)</span><br><span class=\"line\">C --&gt;|rerender| E(subscribed views)</span><br></pre></td></tr></table></figure>\n<h3 id=\"action\">Action</h3>\n<p>Actions are just plain object that contains <code>type</code> and <code>payload</code> property, such as</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">type</span>: ADD_TODO,</span><br><span class=\"line\">    payload: text</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Actions should be returned by action creaters.</p>\n<h3 id=\"reducer\">Reducer</h3>\n<p>Reducers are just pure functions that take the previous <code>related</code> state and action, then return the new state</p>\n<p>Reducers can be combined together by using a function <code>combineReducers</code> from <code>redux</code></p>\n<h3 id=\"store\">Store</h3>\n<p>Single source of truth. Store should be created at the root level,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./components/App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Provider&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"apis\">APIs</h3>\n<ul>\n<li><a href=\"https://redux.js.org/api-reference/createstore\" target=\"_blank\" rel=\"external\">createStore</a>\n<ul>\n<li>create the single store at root level</li>\n</ul>\n</li>\n<li><a href=\"https://redux.js.org/api-reference/store\" target=\"_blank\" rel=\"external\">Store</a></li>\n<li><a href=\"https://redux.js.org/api-reference/combinereducers\" target=\"_blank\" rel=\"external\">combineReducers</a></li>\n<li><a href=\"https://note.youdao.com/\" target=\"_blank\" rel=\"external\">applyMiddleware</a>\n<ul>\n<li>useful for async ajax requests</li>\n</ul>\n</li>\n<li><a href=\"https://note.youdao.com/\" target=\"_blank\" rel=\"external\">bindActionCreators</a>\n<ul>\n<li>the only use case for this is when you want to pass some action creators down to a component that isn’t aware of Redux</li>\n</ul>\n</li>\n<li><a href=\"https://note.youdao.com/\" target=\"_blank\" rel=\"external\">compose</a>\n<ul>\n<li>composes functions from right to left</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"react-redux\">react-redux</h3>\n<h4 id=\"\"><provider store=\"\"></provider></h4>\n<p>Makes the Redux store available to the connect() calls in the component hierarchy below.</p>\n<h4 id=\"connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\">connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h4>\n<p>Connects a React component to a Redux store.</p>\n<p><code>connect( mapStateToProps, mapDispatchToProps )(component)</code></p>\n<p>If no parameters are provided, it injects just dispatch and doesn’t listen to store</p>\n<p><strong>params:</strong></p>\n<ul>\n<li>\n<p>mapStateToProps(state, [ownProps]): stateProps</p>\n</li>\n<li>\n<p>mapDispatchToProps(dispatch, [ownProps]): dispatchProps</p>\n</li>\n</ul>\n<h3 id=\"related-libraries\">related libraries</h3>\n<ul>\n<li>\n<p><a href=\"https://github.com/gaearon/redux-thunk\" target=\"_blank\" rel=\"external\">redux-thunk</a></p>\n<ul>\n<li>Redux Thunk middleware allows you to write action creators that return a function instead of an action.</li>\n<li>The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. Thus it’s very useful for async actions and promises.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\" rel=\"external\">redux-saga</a></p>\n<ul>\n<li>a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, simple to test, and better at handling failures.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"feature\">Feature</h3>\n<ul>\n<li>reacting to actions or events</li>\n<li>single store</li>\n<li>functional programming paradigm</li>\n<li>immutable</li>\n<li>pure</li>\n<li>explicit update logic</li>\n<li>plain JavaScript</li>\n<li>more boilerplate</li>\n<li>normalized state</li>\n<li>flat state</li>\n<li>examples:\n<ul>\n<li>business apps</li>\n<li>event based systems</li>\n<li>game events involving a complex reaction</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"redux-todolist-example\">redux todolist example:</h3>\n<p><a href=\"https://codesandbox.io/s/1zo57njq9q\" target=\"_blank\" rel=\"external\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit todos\"></a></p>\n<h3 id=\"summary\">Summary</h3>\n<p>Redux is an opinionated library that reinforces immutable data and functional programming pattern. It provides more granular control of data flow and shines in testability, scaleability, maintainability. It will be suitable for a large team and complex apps because it has mature best practices and community support.</p>\n<h2 id=\"mobx\">MobX</h2>\n<p>Data flow:<br>\n<img src=\"https://mobx.js.org/docs/flow.png\" alt=\"dataflow\"></p>\n<h3 id=\"observable\">observable</h3>\n<p>Observable values can be JS primitives, references, plain objects, class instances, arrays and maps.</p>\n<p>Usage:</p>\n<ul>\n<li>observable(value)</li>\n<li>@observable classProperty = value</li>\n</ul>\n<h3 id=\"computed-ampamp-autorun\">computed &amp;&amp; autorun</h3>\n<p>They are both reactively invoked expressions, but use @computed if you want to reactively produce a value that can be used by other observers and autorun if you don’t want to produce a new value but rather want to achieve an effect. For example imperative side effects like logging, making network requests etc.</p>\n<p>example:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;observable, computed&#125; from <span class=\"string\">\"mobx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderLine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@observable</span> price = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@observable</span> amount = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(price) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@computed</span> <span class=\"keyword\">get</span> total() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price * <span class=\"keyword\">this</span>.amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"observer\">(@)observer</h3>\n<p>The react components that are wrapped by observer will react to the change of observables.</p>\n<h3 id=\"action\">action</h3>\n<p>It has similar concepts as action in redux. Simply call <code>mobx.useStrict(true)</code> when your application is initialized, and MobX will throw anytime you (accidentally) try to modify state without using an action.</p>\n<h3 id=\"feature\">Feature</h3>\n<ul>\n<li>Reacting to state changes</li>\n<li>multiple stores</li>\n<li>object-oriented programming and reactive programming paradigms</li>\n<li>mutable</li>\n<li>impure</li>\n<li>implicit update logic</li>\n<li>“magic” JavaScript</li>\n<li>less boilerplate</li>\n<li>denormalized state</li>\n<li>nested state</li>\n<li>Examples\n<ul>\n<li>Real-time systems, dashboards, etc</li>\n<li>Text editors, presentation software, etc.</li>\n<li>Not for event based</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mobx-todo-example\">mobx todo example:</h3>\n<p><a href=\"https://codesandbox.io/s/vnw0yzx555\" target=\"_blank\" rel=\"external\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit Simple MobX TodoList\"></a></p>\n<h3 id=\"summary\">Summary</h3>\n<p>Mobx is more suitable for simpler application, rapid prototyping and a small team. It has short learning curve for those that are already familiar with object-oriented programming. It can also be used in large projects if explicit constraints are added, such as useStrict.</p>\n<h2 id=\"new-context-api\">new context api</h2>\n<p>The new context api tries to provide a native global store for React apps and solves the problems that old context api has: <a href=\"https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#shouldcomponentupdate-blocks-context-changes\" target=\"_blank\" rel=\"external\">shouldComponentUpdate blocks context changes</a> and <a href=\"https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#shifts-complexity-to-user-space\" target=\"_blank\" rel=\"external\">Shifts complexity to user space</a></p>\n<p>Context in React provides a mechanism for a child component to access a value in an ancestor component.</p>\n<h3 id=\"reactcreatecontext\">React.createContext()</h3>\n<p>It is passed the initial value (and optionally a <a href=\"https://twitter.com/acdlite/status/957446433656864768\" target=\"_blank\" rel=\"external\">fancy opt-out function that uses a bitmask</a>). This returns an object with a “provider” and a “consumer”</p>\n<h3 id=\"provider\">Provider</h3>\n<p>The provider acts as an event emitter. It keeps track of the most recent context value, and a list of subscribers to be notified whenever it changes.</p>\n<h3 id=\"consumer\">Consumer</h3>\n<p>The consumer accesses the provider’s event emitter using the context API. (This usage is fine because the event emitter itself does not change). When the provider emits a change event, the consumer is notified and calls setState on itself to schedule a re-render.</p>\n<p>Example:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"type\">ThemeContext</span> = <span class=\"type\">React</span>.createContext(<span class=\"symbol\">'ligh</span>t')</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThemeProvider</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;theme: <span class=\"symbol\">'ligh</span>t'&#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">ThemeContext</span>.provide(<span class=\"keyword\">this</span>.state.theme, <span class=\"keyword\">this</span>.props.children)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"type\">ThemeConsumer</span> = (&#123;children&#125;) =&gt; <span class=\"type\">ThemeContext</span>.consume(children)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    &lt;<span class=\"type\">ThemeProvider</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"type\">ThemeConsumer</span>&gt;&#123;<span class=\"keyword\">val</span> =&gt; &lt;div&gt;&#123;<span class=\"keyword\">val</span>&#125;&lt;/div&gt;&#125;&lt;/<span class=\"type\">ThemeConsumer</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"type\">ThemeProvider</span>&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codesandbox.io/s/k71q68nzr\" target=\"_blank\" rel=\"external\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit Example of React's new context API\"></a></p>\n<h3 id=\"summary\">Summary</h3>\n<p>New context api provides a native way to manage global store in react apps and is perfect for dependency injection (theme, intl, buildConfig), but it lacks the power to control the data flow. Redux or Mobx may still be needed to handle complex async data process.</p>\n<h2 id=\"resource\">Resource</h2>\n<p><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"external\">Redux Doc</a></p>\n<p><a href=\"https://mobx.js.org/index.html\" target=\"_blank\" rel=\"external\">Mobx Doc</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=76FRrbY18Bs\" target=\"_blank\" rel=\"external\">Preethi Kasireddy - MobX vs Redux: Comparing the Opposing Paradigms</a></p>\n<p><a href=\"https://www.robinwieruch.de/redux-mobx-confusion/\" target=\"_blank\" rel=\"external\">Redux or MobX: An attempt to dissolve the Confusion</a></p>\n<p><a href=\"https://medium.com/@DidierFranc/replacing-redux-with-the-new-react-context-api-8f5d01a00e8c\" target=\"_blank\" rel=\"external\">Replacing redux with the new React context API</a></p>\n<p><a href=\"https://github.com/acdlite/rfcs/blob/new-version-of-context/text/0000-new-version-of-context.md\" target=\"_blank\" rel=\"external\">new version of context</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Redux and Mobx are two most popular state management tools for React apps, representing different design philosophis as object-oriented programming and functional programming. Recently, a new context api has been proposed to provide a native global store solution and received a lot of discussions. Here’s a brief comparion of different methods. I have to say before hand, most things in software engineering are based on opinions and tradeoffs, not facts or hard truth.</p>\n<h2 id=\"redux\">Redux</h2>\n<p>Basic data flow:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A[Action]--&gt;|just payload|B(Reducer)</span><br><span class=\"line\">D[prevState] --&gt; B</span><br><span class=\"line\">B --&gt;|new state| C(Store)</span><br><span class=\"line\">C --&gt;|rerender| E(subscribed views)</span><br></pre></td></tr></table></figure>\n<h3 id=\"action\">Action</h3>\n<p>Actions are just plain object that contains <code>type</code> and <code>payload</code> property, such as</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">type</span>: ADD_TODO,</span><br><span class=\"line\">    payload: text</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Actions should be returned by action creaters.</p>\n<h3 id=\"reducer\">Reducer</h3>\n<p>Reducers are just pure functions that take the previous <code>related</code> state and action, then return the new state</p>\n<p>Reducers can be combined together by using a function <code>combineReducers</code> from <code>redux</code></p>\n<h3 id=\"store\">Store</h3>\n<p>Single source of truth. Store should be created at the root level,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./components/App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Provider&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ap-is\">APIs</h3>\n<ul>\n<li><a href=\"https://redux.js.org/api-reference/createstore\" target=\"_blank\" rel=\"external\">createStore</a>\n<ul>\n<li>create the single store at root level</li>\n</ul>\n</li>\n<li><a href=\"https://redux.js.org/api-reference/store\" target=\"_blank\" rel=\"external\">Store</a></li>\n<li><a href=\"https://redux.js.org/api-reference/combinereducers\" target=\"_blank\" rel=\"external\">combineReducers</a></li>\n<li><a href=\"https://note.youdao.com/\" target=\"_blank\" rel=\"external\">applyMiddleware</a>\n<ul>\n<li>useful for async ajax requests</li>\n</ul>\n</li>\n<li><a href=\"https://note.youdao.com/\" target=\"_blank\" rel=\"external\">bindActionCreators</a>\n<ul>\n<li>the only use case for this is when you want to pass some action creators down to a component that isn’t aware of Redux</li>\n</ul>\n</li>\n<li><a href=\"https://note.youdao.com/\" target=\"_blank\" rel=\"external\">compose</a>\n<ul>\n<li>composes functions from right to left</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"react-redux\">react-redux</h3>\n<h4 id=\"provider-store\"><provider store=\"\"></provider></h4>\n<p>Makes the Redux store available to the connect() calls in the component hierarchy below.</p>\n<h4 id=\"connect-map-state-to-props-map-dispatch-to-props-merge-props-options\">connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h4>\n<p>Connects a React component to a Redux store.</p>\n<p><code>connect( mapStateToProps, mapDispatchToProps )(component)</code></p>\n<p>If no parameters are provided, it injects just dispatch and doesn’t listen to store</p>\n<p><strong>params:</strong></p>\n<ul>\n<li>\n<p>mapStateToProps(state, [ownProps]): stateProps</p>\n</li>\n<li>\n<p>mapDispatchToProps(dispatch, [ownProps]): dispatchProps</p>\n</li>\n</ul>\n<h3 id=\"related-libraries\">related libraries</h3>\n<ul>\n<li>\n<p><a href=\"https://github.com/gaearon/redux-thunk\" target=\"_blank\" rel=\"external\">redux-thunk</a></p>\n<ul>\n<li>Redux Thunk middleware allows you to write action creators that return a function instead of an action.</li>\n<li>The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. Thus it’s very useful for async actions and promises.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\" rel=\"external\">redux-saga</a></p>\n<ul>\n<li>a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, simple to test, and better at handling failures.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"feature\">Feature</h3>\n<ul>\n<li>reacting to actions or events</li>\n<li>single store</li>\n<li>functional programming paradigm</li>\n<li>immutable</li>\n<li>pure</li>\n<li>explicit update logic</li>\n<li>plain JavaScript</li>\n<li>more boilerplate</li>\n<li>normalized state</li>\n<li>flat state</li>\n<li>examples:\n<ul>\n<li>business apps</li>\n<li>event based systems</li>\n<li>game events involving a complex reaction</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"redux-todolist-example\">redux todolist example:</h3>\n<p><a href=\"https://codesandbox.io/s/1zo57njq9q\" target=\"_blank\" rel=\"external\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit todos\"></a></p>\n<h3 id=\"summary\">Summary</h3>\n<p>Redux is an opinionated library that reinforces immutable data and functional programming pattern. It provides more granular control of data flow and shines in testability, scaleability, maintainability. It will be suitable for a large team and complex apps because it has mature best practices and community support.</p>\n<h2 id=\"mob-x\">MobX</h2>\n<p>Data flow:<br>\n<img src=\"https://mobx.js.org/docs/flow.png\" alt=\"dataflow\"></p>\n<h3 id=\"observable\">observable</h3>\n<p>Observable values can be JS primitives, references, plain objects, class instances, arrays and maps.</p>\n<p>Usage:</p>\n<ul>\n<li>observable(value)</li>\n<li>@observable classProperty = value</li>\n</ul>\n<h3 id=\"computed-amp-amp-autorun\">computed &amp;&amp; autorun</h3>\n<p>They are both reactively invoked expressions, but use @computed if you want to reactively produce a value that can be used by other observers and autorun if you don’t want to produce a new value but rather want to achieve an effect. For example imperative side effects like logging, making network requests etc.</p>\n<p>example:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;observable, computed&#125; from <span class=\"string\">\"mobx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderLine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@observable</span> price = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@observable</span> amount = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(price) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@computed</span> <span class=\"keyword\">get</span> total() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price * <span class=\"keyword\">this</span>.amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"observer\">(@)observer</h3>\n<p>The react components that are wrapped by observer will react to the change of observables.</p>\n<h3 id=\"action-1\">action</h3>\n<p>It has similar concepts as action in redux. Simply call <code>mobx.useStrict(true)</code> when your application is initialized, and MobX will throw anytime you (accidentally) try to modify state without using an action.</p>\n<h3 id=\"feature-1\">Feature</h3>\n<ul>\n<li>Reacting to state changes</li>\n<li>multiple stores</li>\n<li>object-oriented programming and reactive programming paradigms</li>\n<li>mutable</li>\n<li>impure</li>\n<li>implicit update logic</li>\n<li>“magic” JavaScript</li>\n<li>less boilerplate</li>\n<li>denormalized state</li>\n<li>nested state</li>\n<li>Examples\n<ul>\n<li>Real-time systems, dashboards, etc</li>\n<li>Text editors, presentation software, etc.</li>\n<li>Not for event based</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mobx-todo-example\">mobx todo example:</h3>\n<p><a href=\"https://codesandbox.io/s/vnw0yzx555\" target=\"_blank\" rel=\"external\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit Simple MobX TodoList\"></a></p>\n<h3 id=\"summary-1\">Summary</h3>\n<p>Mobx is more suitable for simpler application, rapid prototyping and a small team. It has short learning curve for those that are already familiar with object-oriented programming. It can also be used in large projects if explicit constraints are added, such as useStrict.</p>\n<h2 id=\"new-context-api\">new context api</h2>\n<p>The new context api tries to provide a native global store for React apps and solves the problems that old context api has: <a href=\"https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#shouldcomponentupdate-blocks-context-changes\" target=\"_blank\" rel=\"external\">shouldComponentUpdate blocks context changes</a> and <a href=\"https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#shifts-complexity-to-user-space\" target=\"_blank\" rel=\"external\">Shifts complexity to user space</a></p>\n<p>Context in React provides a mechanism for a child component to access a value in an ancestor component.</p>\n<h3 id=\"react-create-context\">React.createContext()</h3>\n<p>It is passed the initial value (and optionally a <a href=\"https://twitter.com/acdlite/status/957446433656864768\" target=\"_blank\" rel=\"external\">fancy opt-out function that uses a bitmask</a>). This returns an object with a “provider” and a “consumer”</p>\n<h3 id=\"provider\">Provider</h3>\n<p>The provider acts as an event emitter. It keeps track of the most recent context value, and a list of subscribers to be notified whenever it changes.</p>\n<h3 id=\"consumer\">Consumer</h3>\n<p>The consumer accesses the provider’s event emitter using the context API. (This usage is fine because the event emitter itself does not change). When the provider emits a change event, the consumer is notified and calls setState on itself to schedule a re-render.</p>\n<p>Example:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const <span class=\"type\">ThemeContext</span> = <span class=\"type\">React</span>.createContext(<span class=\"symbol\">'ligh</span>t')</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThemeProvider</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;theme: <span class=\"symbol\">'ligh</span>t'&#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">ThemeContext</span>.provide(<span class=\"keyword\">this</span>.state.theme, <span class=\"keyword\">this</span>.props.children)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const <span class=\"type\">ThemeConsumer</span> = (&#123;children&#125;) =&gt; <span class=\"type\">ThemeContext</span>.consume(children)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    &lt;<span class=\"type\">ThemeProvider</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"type\">ThemeConsumer</span>&gt;&#123;<span class=\"keyword\">val</span> =&gt; &lt;div&gt;&#123;<span class=\"keyword\">val</span>&#125;&lt;/div&gt;&#125;&lt;/<span class=\"type\">ThemeConsumer</span>&gt;</span><br><span class=\"line\">    &lt;/<span class=\"type\">ThemeProvider</span>&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codesandbox.io/s/k71q68nzr\" target=\"_blank\" rel=\"external\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit Example of React's new context API\"></a></p>\n<h3 id=\"summary-2\">Summary</h3>\n<p>New context api provides a native way to manage global store in react apps and is perfect for dependency injection (theme, intl, buildConfig), but it lacks the power to control the data flow. Redux or Mobx may still be needed to handle complex async data process.</p>\n<h2 id=\"resource\">Resource</h2>\n<p><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"external\">Redux Doc</a></p>\n<p><a href=\"https://mobx.js.org/index.html\" target=\"_blank\" rel=\"external\">Mobx Doc</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=76FRrbY18Bs\" target=\"_blank\" rel=\"external\">Preethi Kasireddy - MobX vs Redux: Comparing the Opposing Paradigms</a></p>\n<p><a href=\"https://www.robinwieruch.de/redux-mobx-confusion/\" target=\"_blank\" rel=\"external\">Redux or MobX: An attempt to dissolve the Confusion</a></p>\n<p><a href=\"https://medium.com/@DidierFranc/replacing-redux-with-the-new-react-context-api-8f5d01a00e8c\" target=\"_blank\" rel=\"external\">Replacing redux with the new React context API</a></p>\n<p><a href=\"https://github.com/acdlite/rfcs/blob/new-version-of-context/text/0000-new-version-of-context.md\" target=\"_blank\" rel=\"external\">new version of context</a></p>\n"},{"title":"一次关于networking的对话","catalog":true,"date":"2017-12-26T02:41:43.000Z","subtitle":null,"header-img":"lighthouse3.jpg","_content":"\n房东在学校某部门做外联性质的工作，是个networking很厉害的人，平时待人处物都会给人一种很得体的感觉，圣诞前夕会专门写贺卡或者小纸条加上葡萄酒送同事、朋友，在我去参加面试之前专门指导我怎么去自我介绍以及事后如何发感谢信之类的，确实也是职场“老手”。于是前天我和他展开了一段关于networking的对话，让我觉得受益匪浅，更多也是一种看待视角的转变吧。\n\n### networking能力可以培养么？\n\n房东认为是可以的，但是要去观察，以及花时间有目的地训练。他说他刚进入职场的时候，他的第一个老板就是一个社交能力很强的人。一个活动来了一百多个嘉宾，结束的时候他老板大概能记住其中八九十人的名字，甚至有些人孩子的名字，兴趣爱好都能复述出来。然而他老板那时候已经六七十岁，所以并不是因为脑子转得特别快或是记忆力好，而是长期以来培养的一种习惯和能力。他也逐渐从他老板身上学习，去培养自己这方面的能力，因为记住这些关键的信息既能拉进关系，也表现对对方的一种尊重。\n\n他也解释说为什么一开始遇到我们的时候一定要我们报中文名，而不是大家为了方便老美记忆取的什么Tony, Allen之类的。当然这和他自己经历过的事也相关，他叫Alok，一个印度名字。在他曾经接电话的时候，别人居然问他“What is your American name?”。他就直言这就是我的名字，如果你不认识或者叫不出我的名字，我们就不要继续聊下去了。很多人自己的独特性就应该被尊重，而不是为了方便或是其它什么原因被抹去，被“美国化”或者大众化。\n\n### networking的意义是什么？\n\n房东的女朋友是中国人，所以房东学到了关系（guanxi）这个词，他直言这个东西美国一点都不比中国少，但可能没有那么直接，而且潜在于一层层包装之下。更多的人脉关系意味着更多的机会与信息。但我向他提出的问题是，很多networking的活动我看不到意义怎么办？很多事情常常更愿意自己网上搜，自己解决而不是找人。所以很多时候极其没有耐心。\n\n房东的观点是，其实去找人谈话，或者去帮人解决问题也是在提高自己。当别人在聊天过程中阐述问题、观点的时候，你可以假设自己处于他人的位置上，想想自己会怎么思考与应对，这对将来遇到类似的问题时是极有帮助的。阅历也是在这个过程中逐渐积累的。\n\n另外，人脉都是到用时方恨少，这也就是为什么要去记忆不同人的特点，所在领域，通过后面的互动建立联系。完全陌生的人之间的cold reach是很难的，但是往往通过某一个共同参加的活动作为切入点进行联系就会方便很多。\n\n### 沟通与做事一样重要\n\n因为很快要开始工作了，后来还聊到很多关于management，leadership之类的话题，不一而足，但有一点感受是共同的：就是很多职场上沟通以及社交的能力都是要刻意去锻炼的，这也是我们中国人很缺乏的一块技能。确实能体会到很多中国人在公众场合对于陌生人之间的交往往局促不安，其实能力都不比老美差，但是会表现出来没有那么自信与镇定。\n\n并不是只要写好代码，完成分配的任务就是做好工作了。如何去协作，如何去展示自己的成果都是很重要的一环。看很多论坛里中国很喜欢抱怨印度人抢了功劳，靠一张嘴就升官加薪，然而这并不是全部的事实，我们故意去抱怨这样一种现象来掩盖自己社交努力的不足也许是背后真正的原因。\n\n有些人喜欢说中国人的文化自信不足，但我觉得有时候是对自己的文化太过于执着、保守，认为凡是和自己文化习惯不同的社交方式都是一种时间浪费，不愿去改变，不愿去融入。而往往是，你在公众场合或者集体里发声得越少，就越没人觉得你很重要，自然就是嗓门大的获得了最多话语权。\n\n当然回到networking本身，真诚才是交朋友最重要的因素，技巧都是次要的，只是这种意愿要慢慢培养，毕竟与牛人一席话，往往胜读十年书。","source":"_posts/一次关于networking的对话.md","raw":"---\ntitle: 一次关于networking的对话\ncatalog: true\ndate: 2017-12-25 21:41:43\nsubtitle:\nheader-img: \"lighthouse3.jpg\"\ntags: \n- Thoughts\n---\n\n房东在学校某部门做外联性质的工作，是个networking很厉害的人，平时待人处物都会给人一种很得体的感觉，圣诞前夕会专门写贺卡或者小纸条加上葡萄酒送同事、朋友，在我去参加面试之前专门指导我怎么去自我介绍以及事后如何发感谢信之类的，确实也是职场“老手”。于是前天我和他展开了一段关于networking的对话，让我觉得受益匪浅，更多也是一种看待视角的转变吧。\n\n### networking能力可以培养么？\n\n房东认为是可以的，但是要去观察，以及花时间有目的地训练。他说他刚进入职场的时候，他的第一个老板就是一个社交能力很强的人。一个活动来了一百多个嘉宾，结束的时候他老板大概能记住其中八九十人的名字，甚至有些人孩子的名字，兴趣爱好都能复述出来。然而他老板那时候已经六七十岁，所以并不是因为脑子转得特别快或是记忆力好，而是长期以来培养的一种习惯和能力。他也逐渐从他老板身上学习，去培养自己这方面的能力，因为记住这些关键的信息既能拉进关系，也表现对对方的一种尊重。\n\n他也解释说为什么一开始遇到我们的时候一定要我们报中文名，而不是大家为了方便老美记忆取的什么Tony, Allen之类的。当然这和他自己经历过的事也相关，他叫Alok，一个印度名字。在他曾经接电话的时候，别人居然问他“What is your American name?”。他就直言这就是我的名字，如果你不认识或者叫不出我的名字，我们就不要继续聊下去了。很多人自己的独特性就应该被尊重，而不是为了方便或是其它什么原因被抹去，被“美国化”或者大众化。\n\n### networking的意义是什么？\n\n房东的女朋友是中国人，所以房东学到了关系（guanxi）这个词，他直言这个东西美国一点都不比中国少，但可能没有那么直接，而且潜在于一层层包装之下。更多的人脉关系意味着更多的机会与信息。但我向他提出的问题是，很多networking的活动我看不到意义怎么办？很多事情常常更愿意自己网上搜，自己解决而不是找人。所以很多时候极其没有耐心。\n\n房东的观点是，其实去找人谈话，或者去帮人解决问题也是在提高自己。当别人在聊天过程中阐述问题、观点的时候，你可以假设自己处于他人的位置上，想想自己会怎么思考与应对，这对将来遇到类似的问题时是极有帮助的。阅历也是在这个过程中逐渐积累的。\n\n另外，人脉都是到用时方恨少，这也就是为什么要去记忆不同人的特点，所在领域，通过后面的互动建立联系。完全陌生的人之间的cold reach是很难的，但是往往通过某一个共同参加的活动作为切入点进行联系就会方便很多。\n\n### 沟通与做事一样重要\n\n因为很快要开始工作了，后来还聊到很多关于management，leadership之类的话题，不一而足，但有一点感受是共同的：就是很多职场上沟通以及社交的能力都是要刻意去锻炼的，这也是我们中国人很缺乏的一块技能。确实能体会到很多中国人在公众场合对于陌生人之间的交往往局促不安，其实能力都不比老美差，但是会表现出来没有那么自信与镇定。\n\n并不是只要写好代码，完成分配的任务就是做好工作了。如何去协作，如何去展示自己的成果都是很重要的一环。看很多论坛里中国很喜欢抱怨印度人抢了功劳，靠一张嘴就升官加薪，然而这并不是全部的事实，我们故意去抱怨这样一种现象来掩盖自己社交努力的不足也许是背后真正的原因。\n\n有些人喜欢说中国人的文化自信不足，但我觉得有时候是对自己的文化太过于执着、保守，认为凡是和自己文化习惯不同的社交方式都是一种时间浪费，不愿去改变，不愿去融入。而往往是，你在公众场合或者集体里发声得越少，就越没人觉得你很重要，自然就是嗓门大的获得了最多话语权。\n\n当然回到networking本身，真诚才是交朋友最重要的因素，技巧都是次要的，只是这种意愿要慢慢培养，毕竟与牛人一席话，往往胜读十年书。","slug":"一次关于networking的对话","published":1,"updated":"2017-12-26T02:47:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfj2ljty000gdeu5nffrzmrf","content":"<p>房东在学校某部门做外联性质的工作，是个networking很厉害的人，平时待人处物都会给人一种很得体的感觉，圣诞前夕会专门写贺卡或者小纸条加上葡萄酒送同事、朋友，在我去参加面试之前专门指导我怎么去自我介绍以及事后如何发感谢信之类的，确实也是职场“老手”。于是前天我和他展开了一段关于networking的对话，让我觉得受益匪浅，更多也是一种看待视角的转变吧。</p>\n<h3 id=\"networking能力可以培养么\">networking能力可以培养么？</h3>\n<p>房东认为是可以的，但是要去观察，以及花时间有目的地训练。他说他刚进入职场的时候，他的第一个老板就是一个社交能力很强的人。一个活动来了一百多个嘉宾，结束的时候他老板大概能记住其中八九十人的名字，甚至有些人孩子的名字，兴趣爱好都能复述出来。然而他老板那时候已经六七十岁，所以并不是因为脑子转得特别快或是记忆力好，而是长期以来培养的一种习惯和能力。他也逐渐从他老板身上学习，去培养自己这方面的能力，因为记住这些关键的信息既能拉进关系，也表现对对方的一种尊重。</p>\n<p>他也解释说为什么一开始遇到我们的时候一定要我们报中文名，而不是大家为了方便老美记忆取的什么Tony, Allen之类的。当然这和他自己经历过的事也相关，他叫Alok，一个印度名字。在他曾经接电话的时候，别人居然问他“What is your American name?”。他就直言这就是我的名字，如果你不认识或者叫不出我的名字，我们就不要继续聊下去了。很多人自己的独特性就应该被尊重，而不是为了方便或是其它什么原因被抹去，被“美国化”或者大众化。</p>\n<h3 id=\"networking的意义是什么\">networking的意义是什么？</h3>\n<p>房东的女朋友是中国人，所以房东学到了关系（guanxi）这个词，他直言这个东西美国一点都不比中国少，但可能没有那么直接，而且潜在于一层层包装之下。更多的人脉关系意味着更多的机会与信息。但我向他提出的问题是，很多networking的活动我看不到意义怎么办？很多事情常常更愿意自己网上搜，自己解决而不是找人。所以很多时候极其没有耐心。</p>\n<p>房东的观点是，其实去找人谈话，或者去帮人解决问题也是在提高自己。当别人在聊天过程中阐述问题、观点的时候，你可以假设自己处于他人的位置上，想想自己会怎么思考与应对，这对将来遇到类似的问题时是极有帮助的。阅历也是在这个过程中逐渐积累的。</p>\n<p>另外，人脉都是到用时方恨少，这也就是为什么要去记忆不同人的特点，所在领域，通过后面的互动建立联系。完全陌生的人之间的cold reach是很难的，但是往往通过某一个共同参加的活动作为切入点进行联系就会方便很多。</p>\n<h3 id=\"沟通与做事一样重要\">沟通与做事一样重要</h3>\n<p>因为很快要开始工作了，后来还聊到很多关于management，leadership之类的话题，不一而足，但有一点感受是共同的：就是很多职场上沟通以及社交的能力都是要刻意去锻炼的，这也是我们中国人很缺乏的一块技能。确实能体会到很多中国人在公众场合对于陌生人之间的交往往局促不安，其实能力都不比老美差，但是会表现出来没有那么自信与镇定。</p>\n<p>并不是只要写好代码，完成分配的任务就是做好工作了。如何去协作，如何去展示自己的成果都是很重要的一环。看很多论坛里中国很喜欢抱怨印度人抢了功劳，靠一张嘴就升官加薪，然而这并不是全部的事实，我们故意去抱怨这样一种现象来掩盖自己社交努力的不足也许是背后真正的原因。</p>\n<p>有些人喜欢说中国人的文化自信不足，但我觉得有时候是对自己的文化太过于执着、保守，认为凡是和自己文化习惯不同的社交方式都是一种时间浪费，不愿去改变，不愿去融入。而往往是，你在公众场合或者集体里发声得越少，就越没人觉得你很重要，自然就是嗓门大的获得了最多话语权。</p>\n<p>当然回到networking本身，真诚才是交朋友最重要的因素，技巧都是次要的，只是这种意愿要慢慢培养，毕竟与牛人一席话，往往胜读十年书。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>房东在学校某部门做外联性质的工作，是个networking很厉害的人，平时待人处物都会给人一种很得体的感觉，圣诞前夕会专门写贺卡或者小纸条加上葡萄酒送同事、朋友，在我去参加面试之前专门指导我怎么去自我介绍以及事后如何发感谢信之类的，确实也是职场“老手”。于是前天我和他展开了一段关于networking的对话，让我觉得受益匪浅，更多也是一种看待视角的转变吧。</p>\n<h3 id=\"networking-neng-li-ke-yi-pei-yang-yao\">networking能力可以培养么？</h3>\n<p>房东认为是可以的，但是要去观察，以及花时间有目的地训练。他说他刚进入职场的时候，他的第一个老板就是一个社交能力很强的人。一个活动来了一百多个嘉宾，结束的时候他老板大概能记住其中八九十人的名字，甚至有些人孩子的名字，兴趣爱好都能复述出来。然而他老板那时候已经六七十岁，所以并不是因为脑子转得特别快或是记忆力好，而是长期以来培养的一种习惯和能力。他也逐渐从他老板身上学习，去培养自己这方面的能力，因为记住这些关键的信息既能拉进关系，也表现对对方的一种尊重。</p>\n<p>他也解释说为什么一开始遇到我们的时候一定要我们报中文名，而不是大家为了方便老美记忆取的什么Tony, Allen之类的。当然这和他自己经历过的事也相关，他叫Alok，一个印度名字。在他曾经接电话的时候，别人居然问他“What is your American name?”。他就直言这就是我的名字，如果你不认识或者叫不出我的名字，我们就不要继续聊下去了。很多人自己的独特性就应该被尊重，而不是为了方便或是其它什么原因被抹去，被“美国化”或者大众化。</p>\n<h3 id=\"networking-de-yi-yi-shi-shi-yao\">networking的意义是什么？</h3>\n<p>房东的女朋友是中国人，所以房东学到了关系（guanxi）这个词，他直言这个东西美国一点都不比中国少，但可能没有那么直接，而且潜在于一层层包装之下。更多的人脉关系意味着更多的机会与信息。但我向他提出的问题是，很多networking的活动我看不到意义怎么办？很多事情常常更愿意自己网上搜，自己解决而不是找人。所以很多时候极其没有耐心。</p>\n<p>房东的观点是，其实去找人谈话，或者去帮人解决问题也是在提高自己。当别人在聊天过程中阐述问题、观点的时候，你可以假设自己处于他人的位置上，想想自己会怎么思考与应对，这对将来遇到类似的问题时是极有帮助的。阅历也是在这个过程中逐渐积累的。</p>\n<p>另外，人脉都是到用时方恨少，这也就是为什么要去记忆不同人的特点，所在领域，通过后面的互动建立联系。完全陌生的人之间的cold reach是很难的，但是往往通过某一个共同参加的活动作为切入点进行联系就会方便很多。</p>\n<h3 id=\"gou-tong-yu-zuo-shi-yi-yang-zhong-yao\">沟通与做事一样重要</h3>\n<p>因为很快要开始工作了，后来还聊到很多关于management，leadership之类的话题，不一而足，但有一点感受是共同的：就是很多职场上沟通以及社交的能力都是要刻意去锻炼的，这也是我们中国人很缺乏的一块技能。确实能体会到很多中国人在公众场合对于陌生人之间的交往往局促不安，其实能力都不比老美差，但是会表现出来没有那么自信与镇定。</p>\n<p>并不是只要写好代码，完成分配的任务就是做好工作了。如何去协作，如何去展示自己的成果都是很重要的一环。看很多论坛里中国很喜欢抱怨印度人抢了功劳，靠一张嘴就升官加薪，然而这并不是全部的事实，我们故意去抱怨这样一种现象来掩盖自己社交努力的不足也许是背后真正的原因。</p>\n<p>有些人喜欢说中国人的文化自信不足，但我觉得有时候是对自己的文化太过于执着、保守，认为凡是和自己文化习惯不同的社交方式都是一种时间浪费，不愿去改变，不愿去融入。而往往是，你在公众场合或者集体里发声得越少，就越没人觉得你很重要，自然就是嗓门大的获得了最多话语权。</p>\n<p>当然回到networking本身，真诚才是交朋友最重要的因素，技巧都是次要的，只是这种意愿要慢慢培养，毕竟与牛人一席话，往往胜读十年书。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Cloud-Based-Web-Tools-For-VIP/cron_job.png","slug":"cron_job.png","post":"cjfj2ljt10004deu5hdvsjbi7","modified":1,"renderable":0},{"_id":"source/_posts/JavaScript-Flaws/centralPark.jpg","slug":"centralPark.jpg","post":"cjfj2ljtb0008deu5l6mzmivj","modified":1,"renderable":0},{"_id":"source/_posts/Python-Collections-And-Tricks/us_map.JPG","slug":"us_map.JPG","post":"cjfj2ljtf0009deu58em4krqu","modified":1,"renderable":0},{"_id":"source/_posts/deploy-a-react-app-in-kubernetes/tree.jpg","post":"cjfj2ljtj000cdeu5yqahzabq","slug":"tree.jpg","modified":1,"renderable":1},{"_id":"source/_posts/react-global-state-management/sunset.JPG","slug":"sunset.JPG","post":"cjfj2ljtk000ddeu55vbel6xe","modified":1,"renderable":0},{"_id":"source/_posts/一次关于networking的对话/lighthouse3.jpg","post":"cjfj2ljty000gdeu5nffrzmrf","slug":"lighthouse3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Cloud-Based-Web-Tools-For-VIP/formlist.png","post":"cjfj2ljt10004deu5hdvsjbi7","slug":"formlist.png","modified":1,"renderable":1},{"_id":"source/_posts/Cloud-Based-Web-Tools-For-VIP/longwood.JPG","slug":"longwood.JPG","post":"cjfj2ljt10004deu5hdvsjbi7","modified":1,"renderable":0},{"_id":"source/_posts/To-My-Graduation/andy.jpg","slug":"andy.jpg","post":"cjfj2ljtg000adeu5fcbywh87","modified":1,"renderable":0},{"_id":"source/_posts/To-My-Graduation/campus.JPG","slug":"campus.JPG","post":"cjfj2ljtg000adeu5fcbywh87","modified":1,"renderable":0},{"_id":"source/_posts/To-My-Graduation/graduation.jpg","slug":"graduation.jpg","post":"cjfj2ljtg000adeu5fcbywh87","modified":1,"renderable":0},{"_id":"source/_posts/To-My-Graduation/mac_room.JPG","slug":"mac_room.JPG","post":"cjfj2ljtg000adeu5fcbywh87","modified":1,"renderable":0},{"_id":"source/_posts/Interesting-Software-Names/trip.JPG","slug":"trip.JPG","post":"cjfj2ljt40005deu514yvjwpd","modified":1,"renderable":0},{"_id":"source/_posts/Interesting-Software-Names/trigger.png","slug":"trigger.png","post":"cjfj2ljt40005deu514yvjwpd","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjfj2ljt10004deu5hdvsjbi7","category_id":"cjfj2ljt60006deu5vpkxvoqv","_id":"cjfj2ljtm000edeu5yav19loq"}],"PostTag":[{"post_id":"cjfj2ljt10004deu5hdvsjbi7","tag_id":"cjfj2ljta0007deu5v5nb3xfe","_id":"cjfj2lju5000ideu5oget5u1j"},{"post_id":"cjfj2ljt10004deu5hdvsjbi7","tag_id":"cjfj2ljth000bdeu5chz8k14e","_id":"cjfj2lju5000jdeu5v6c5obxa"},{"post_id":"cjfj2ljt10004deu5hdvsjbi7","tag_id":"cjfj2ljtm000fdeu5lt0dswss","_id":"cjfj2lju5000ldeu5hff2655k"},{"post_id":"cjfj2ljtb0008deu5l6mzmivj","tag_id":"cjfj2lju4000hdeu5qffzc4oo","_id":"cjfj2lju6000mdeu5pxpltasq"},{"post_id":"cjfj2ljtf0009deu58em4krqu","tag_id":"cjfj2lju5000kdeu5zw3zdn8g","_id":"cjfj2lju8000odeu5d9whbu7s"},{"post_id":"cjfj2ljtg000adeu5fcbywh87","tag_id":"cjfj2lju7000ndeu54fzutpe5","_id":"cjfj2lju9000qdeu5odb34i9u"},{"post_id":"cjfj2ljtj000cdeu5yqahzabq","tag_id":"cjfj2lju8000pdeu57w1fsii6","_id":"cjfj2ljua000tdeu53766q5vt"},{"post_id":"cjfj2ljtj000cdeu5yqahzabq","tag_id":"cjfj2ljth000bdeu5chz8k14e","_id":"cjfj2ljua000udeu58599j02h"},{"post_id":"cjfj2ljtj000cdeu5yqahzabq","tag_id":"cjfj2ljta0007deu5v5nb3xfe","_id":"cjfj2ljua000wdeu5qbbyil81"},{"post_id":"cjfj2ljtj000cdeu5yqahzabq","tag_id":"cjfj2lju9000rdeu5xjrw16jv","_id":"cjfj2ljua000xdeu5djcuz8m6"},{"post_id":"cjfj2ljtk000ddeu55vbel6xe","tag_id":"cjfj2lju9000sdeu57c7ehexa","_id":"cjfj2ljuc0010deu5h3zxnrw4"},{"post_id":"cjfj2ljtk000ddeu55vbel6xe","tag_id":"cjfj2ljua000vdeu5li5numwk","_id":"cjfj2ljuc0011deu5hc6zl59d"},{"post_id":"cjfj2ljtk000ddeu55vbel6xe","tag_id":"cjfj2ljua000ydeu520e6a2e3","_id":"cjfj2ljuc0012deu5yy1yiqhr"},{"post_id":"cjfj2ljty000gdeu5nffrzmrf","tag_id":"cjfj2lju7000ndeu54fzutpe5","_id":"cjfj2ljuc0013deu5bgdkmcl2"},{"post_id":"cjfj2ljt40005deu514yvjwpd","tag_id":"cjfj343at0015deu5bowp9dn7","_id":"cjfj343av0018deu5q3nxh4e2"},{"post_id":"cjfj2ljt40005deu514yvjwpd","tag_id":"cjfj343au0016deu5ws734443","_id":"cjfj343av0019deu54691i7d3"},{"post_id":"cjfj2ljt40005deu514yvjwpd","tag_id":"cjfj2lju8000pdeu57w1fsii6","_id":"cjfj343av001adeu5y4jawkqv"},{"post_id":"cjfj2ljt40005deu514yvjwpd","tag_id":"cjfj2lju9000rdeu5xjrw16jv","_id":"cjfj343av001bdeu5e9mju2a2"},{"post_id":"cjfj2ljt40005deu514yvjwpd","tag_id":"cjfj343au0017deu5owp15m51","_id":"cjfj343aw001cdeu5q4k8vwih"}],"Tag":[{"name":"Cloud","_id":"cjfj2ljta0007deu5v5nb3xfe"},{"name":"Reactjs","_id":"cjfj2ljth000bdeu5chz8k14e"},{"name":"Firebase","_id":"cjfj2ljtm000fdeu5lt0dswss"},{"name":"JavaScript","_id":"cjfj2lju4000hdeu5qffzc4oo"},{"name":"python","_id":"cjfj2lju5000kdeu5zw3zdn8g"},{"name":"Thoughts","_id":"cjfj2lju7000ndeu54fzutpe5"},{"name":"Kubernetes","_id":"cjfj2lju8000pdeu57w1fsii6"},{"name":"Docker","_id":"cjfj2lju9000rdeu5xjrw16jv"},{"name":"React","_id":"cjfj2lju9000sdeu57c7ehexa"},{"name":"Redux","_id":"cjfj2ljua000vdeu5li5numwk"},{"name":"Mobx","_id":"cjfj2ljua000ydeu520e6a2e3"},{"name":"CockroachDB","_id":"cjfj343at0015deu5bowp9dn7"},{"name":"Google","_id":"cjfj343au0016deu5ws734443"},{"name":"React.js","_id":"cjfj343au0017deu5owp15m51"}]}}